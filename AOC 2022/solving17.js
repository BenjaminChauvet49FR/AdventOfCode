

var rawData = ">><<<<>><>>>><><<>>>><<<>>>><<<<>>><>>>><<<<>>>><<><><<<><<><<<<><<<<>>>><<>>><<<>><<>>><<><<<>>>><>>><<><>><<>>><<<<><>><<>>><<<<><<<<><>><<<<>>><<<<>>>><<<>><><<<<>>><>><<<>><><<<>>><<<<>>><>>>><<<><<>>>><><<<<>>>><<<>>>><>>>><>>>><><<><<>>>><<<>>><<<>>>><><<<><<<<>><>>><<<<><<<><>><><><<><<><<<<>>>><<<<>>><>>><<<><<<<>>><<<<>>>><<<<>>><>>>><<<><<<<>>><<>><>><>><><>>>><<>>><>>>><<<<>><<<>>>><<>><<<>>>><><<<<><>><>>>><>><<<<>>>><<<>>>><>><>>><><<<<>><><<<><<<<>>><<><<<>>><<<<><<>>><<>><<<<><<>>>><<><>>><<><<<>>><<<<><<<<>><>>><<<>>><<<<>>>><<><<>><<<>><<>>>><<<>>>><<>><<>><<><<<<>><<<<>>><<><<<<>>><>><<>><<<<><<<><<<>>>><<<<>><>>>><<<<>><<>>><<>>>><<<<><<<><<>>><>>><<<>>>><>><<><><<<<>>>><<<<>>>><<<<><<<>>><<>><>>>><>>>><<<<>><<<<><<><>><<<<>><<<>>>><<>>>><<<<><<<>>><<<<>>><<>>><<<>>><<><<><<<>>><><<>>><<<>>>><>>>><<<><<<<><<>><><<>>>><><<<<>>><<><<<<><<<<><<<<>>>><<>><<<><<<>><<>>><<>><<<<><<><<<>>><<>><<<><>><<><<<<><<<<>><<>><<><>>><>>><<<>><<<>>>><>>><>><<><<>><><<<<><<<<>>><<<<>>><<<<><<<>>><<<>>>><<<>><<>><><<><<<<><>>>><>>>><<<<><>>><<<>><<<>>>><<<<>><<<<>><<<<>>>><>><<>>>><<<>>><<><<<>>>><<<><<><<<>>>><<<>>>><<>><<<<>>>><><<<>>><>>>><<<>>>><<>><<<<>>>><><<<>><<<>>><<>>><>>>><<>>><><<<<><>>>><><<<<>>>><<<<>><<<>>>><<<>><<<>><<<>>>><><<<<>>><<>>>><<>><><<<>>><<<>><<<>>>><>>>><<>>><<<<>>><<<>><><<<>>><<<<>>>><<>><<>>>><<<<>>><<<><>>><<<>>>><<<<>><<<<><<<<><<<<>>><<<>>><<<>>>><><>>>><>>><<>>><><>>><<>>><>><><<<>>>><<<>><<<<>>><<>>>><<>>><<<>><<<<>><>>><<<>>>><<<>>><<<>>><><><<<>>><<<>><<<>><<<<>><>>><<><>>><<>>><<>>><<<><>>><<<<>>><<<>>><<<>>><>>><<>><<>>>><><<<<>><>>>><<<<><<><<<<>>><>><>>>><<>>>><<>>>><<<>><>>><><<<<>>><><<>><<<>><<<<><<<><<<<><<<>><<>>>><<<<>>><>>><<<<><<<>><<<>>><<>>>><<<<>>>><<>>><><><<<<>>>><>>>><<<<>>><><<<><<<>>><>>><<<<><<<<><>>>><>>>><<><<<>>>><<>>><>>><<<<>>><<<<><<>>>><<<>>><<<<>>><>><<<><>>>><<>>><<<>><<<<>>>><<<>>><<<<><<<<><<>><>>><>><<<<><>>><>>>><<>><>>><<><<<><<>><<<>><>>><<<<>>>><>>>><<<<>>><<<><<<<>>>><<<<>>><<<<>>>><>>><<<>><<>>>><<<<>>>><<<<><<>>>><<<>><>>><<>><><<<<>><<<<>>><<<><<>>><>><<<><>><<>>><>>>><<>>><>>><>><<<><<>>>><<<<><<>><<<<><<<><<<<>>><<<<>>><<<>><<<<>>><<<<>>>><<><<>>><<<<><<>><<<<><<><<<<>>>><<<><<<<>><<<<><>>>><<><<<<>><>>>><><<<>>>><<<>><<<<>>>><<><<<<>><<>><<<<><<<><<>>><<>><>><<><<><>><<<<>>><<>>><>>><<<><<<<><<>>>><<>>><<>><>>>><><<<<><<>><>>><><<>>><<>>>><<<<>>><<<<>>>><<<>><<<<><<<>>><<<>><<<<><<<><><<>>>><<<>>>><<<>>>><<<>>><<>>>><<>>>><<<<>>><<>>><<<>><<>><<>>>><<<>>>><<<<><<>><>>><<<<>>>><<<><<>><>>>><>>>><>>>><<>><<<><<><>><<<>><<<<>><><<>><<>><<>>><><<<>><>><<><<<<><>>><>><<<>>>><<<>>><>>>><<>><><<>><<>>>><<<<><>>>><<>><<>>><<<>>>><<<<>><<>>><<<<>>>><>>><<<>><<<<>>>><<<<>>><<<>><<>>>><<<><<<<>><<<<>><<><<<>>><<>><<<><<<>>>><<<<>>>><<<<>><<<<>><><<>><<<<>>>><<<<>><<>>>><<>><>>>><<<><>><<><>><<>><><<><>>><<<>>>><>>><<>><>><>>>><<<<><<>><<<<><>>>><<>>><<>>><<><>>>><>><<<><<<><>>>><><<><<<<><<><<<<>>>><><<<<>>>><<<>><<>><<<<>>>><<<<>>>><<<>>>><>>><<<>>>><<<>><<<<>>>><<<>><<>>><<<<>>><<><<<<>>>><>><<<>><<>>>><<<<>>>><<>>><<<<>><><<<<>>><<<>>>><<>>>><><>>>><<>>><>>><<<>>><<<>><<<>><<<<><><<><<<<>><>>><>>><><>>><<<>>><<>><<><<<>>>><<<>>><>><><<>>>><<<><>><<<<>><<<><>>><<><<<<>>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>><<<<><<<>><<>><<<<>><<><<<<>><<<<>>><<<<><<<<>>>><<><<<><<<<>>>><<>>><<<<>>>><<<<><<>>><>>><<<><<<<>><<<>>><>>>><><>>>><><>>><<<>>>><<<><>>>><<<>><<<><<>><<><><<<<><<>>><<>><<><<<>>>><<<>>><>>><>><<<<>>><<><<<<>><>>><<<>>>><<>><>>><<<>>><<<>><<<<>>>><>>><>>>><>>><<<>>><<<>>>><<<>><<<>><<<><><>>>><<<<>>>><<<<><>>><><<<<>>><<<<>>><<><><><<>><<><<<<>>><>>>><<>>><<>>>><<<>>><<<>><<<<><>>><>><<<<><<>><<<<><<<<>>>><<<>>><>>>><<<<>>>><<<<><<<<>>>><<<<>>>><<<>><<<<>>>><<>><<<>>>><<<>>>><<<<>><<<><>>>><<><>>>><<<<><>>><><<<><>>>><<>><<<<>><>><<<<>>>><<<<>><<>>><><<<><<<<>>>><>>>><<>><<<><<>>><<>><>><<>><<><<<<>><>><<<<>>>><<<<>><<<<>>><<><<>><>>><<<<>>>><<>>>><<><<>>>><<>><<>>>><<<>><<<<>>>><>>>><<<<><<<><><<<><<<<>><<<><<>><<<<>><<<<>>><<<><<<>><<>><<<>>><<><<>><<>>><<<>>>><>>><<<>>>><<>>><<<<>>>><><>>><<<<>>>><>>>><<<>>><<>>>><<<>><>><>><<<>>><<<>>>><<<>>><<<>>>><<>>>><<<><>><<>>><<<<>>>><><<<<><<>><>><>>><>>>><<>>><<<<>>><<<<><<<>>>><<<<>>>><<<<>>><>><>><<<<>>><<<<>>>><<>>>><<<<><>><<>>>><>>><<>><<<>>><<<>><<<><<<<>>>><<<<>><<>><<>>>><<<<>>>><>><<>>><<<<><<<><><<<>>><<>>><<<>>><<<>><<>>><>><<<>>>><<>>>><<<<>>>><<>><>>>><<<<><>>><<<<>>>><<>>>><<<<>>><<<<>>><<<<>><<>>><<>>>><<>>><<<><<<>>><<>>>><<<<><<>><<<<>>>><>>>><>><><<><<><<<<>><<<><<>>><>>><>>><<<<><<<<><<<<>>>><<>><>>><>>><<<><>>>><>>><>>><<<>><<<><<<>><<<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<>>><><>><<><<<>><<<<>>><<>><<>><<<<>>><<<>>>><<>>>><<<<>>><<<>>><<<><>>>><<<<>><>><<<<>>>><<>>><<<>><><<<><<<<><>>>><>><><>><<<>>>><<<>>><<>>>><><<<<><<<>><<<<>>><<<><<><<<>><>>><><<<>>>><<<<>>>><<<>><>><<<>><<<>><<><<<<>>>><<>>><<<>>><>>>><<<>><<<<>>><<><>><<<<><<<<>><<<>><><>><<<><<<><><<<<>>>><<<><<<<><<<>>>><<>><<><><>>>><><>>><<>>><<<>><<<><<<<>>>><<<><<>><<<<>>><>><<><<>>>><<<>>><<<><<<>>><><<<<>>>><<><>><>>><<>>><<>>>><<>>><<>>>><>><><<<<>><>>><<<>>><<<>><<>>><<<<>><>>><<>>>><<<>>><>>><<<>><<<><<<>>><<><<<>>>><<>><<<<>>><<<>>><<<>>>><>><<<>>><<<<>>>><<><>>>><>>>><<<<>><<<>>>><>>>><<<>><<<<>><<><<>>>><<<<>>><<<<>>><<>><<<<>><<>>><<>>>><>><<>>><<>>>><>>>><>>><<<><<>><<<<>>>><<<>><<<<>>>><<<>><<<><<<>>><<<>><>>><<<<>>>><>>>><<<>><<<<>>><>>>><>><<><><><<<<>>>><<<<><>>><<>><<<>><<<>><<><<>><>><<<><<<>><<<>>><<<>><<>>><<<>>><<<<><>>><>>>><><<>>>><>>>><<<<>>><>>><<<<>>><>>>><>>>><<<<>>>><<>>>><<<>>><<>><<>>><<>>>><<>><>>>><<<>><<<><<><<<>><<<<>>><<>>>><<<<><>><<<>>>><<<>>>><<>><<>>>><<><>><>>><<<<>><<<>>>><<<>>>><<<<>>>><>>>><>>><<<<>>>><<<<><<>>>><<<<>>><<<<>><<>><>>><<<>><<<><<<<>>><><>><>>>><><<><<<<>>>><><<<>><<>>><<<<>>><<<<><>>><<>><>><<<><><>><<>>><<><><<><>><<>>>><<<<><<>><<<><<<><<>>><<<<><>><>>><<<><<<>><<><<<>><<<<>>>><<<>>><<>>>><><>><>>>><>>><>>>><>>><<<<>>>><<<>>><<<<>>>><>><<<<><<>><>><<>>><<<<>>>><<<>>><<<>><<<>><<>><<<<><>>>><>>>><<>>><<<><>><>><<<<>>><>>>><>><<>>>><<<<>><>>><<>>><<<<>>>><<><<<<>>>><<><<>><><>>>><>>><>>>><>>><<><>>><<>>><<<>>><<<<>>>><>>><<>><>><>>>><<>><<<>>><<<>>>><>><<>>><<>>><<><<>>>><<<<>>>><>><<<<>>>><<<<>>>><<>><<>>>><<<<>>>><<<<>><>>><>>>><<<>><>>>><<<><<>>>><<>>><<>>>><<><<<><<<<><<<>>><<>>><<<>>>><<><<<><><<>><<<<><<<<>>><<><<<<>><<<<>>>><<<>>>><<<>><<<<>>><>>><<<<>>><<<>>><<<<>><<<<>>><<>>><<<>><<<<>>><>>><<<>><<<<><<<<>>><<><<<<>>>><<<>>>><<>>><<><<<>>>><>>>><<>>>><>><<>><<>>>><<<<>>><<<>>>><<><<<><>><<<<>>><><>><<>>><<<>><<<>>><<<<><<<>>><<<<>>><<<<>><<><<<<>>>><<<><>><<>><>>>><>><<>><><<<>><<<>><<<<>>>><<<>>><<><<>>>><<>>>><<>>><<>><<<<>>>><<<<>><<>>>><<<>>>><<<<>>><<><<<<>>>><<<><>>><<<>><><>>>><><<<>>>><<<<>><<>><<<>><<><<><<<<>><><<<<>>><<><<>><<<>>>><<<>>><<>>><<<<>><<><<<<>>><<<<><><<<>>><<<><<<<>>><<<<>>><<<<>>><<<<>>><<>>><<<<>>><>><<<>><<<<>>>><><>>>><<><<><<<<>><><<<>>><><<<><<<>>>><<>><<<<>>><<<<><<<>>>><<>>>><<<<>><<<>>>><>>><<<>>>><<<>>>><<<>>><>>>><<<<>><>><<>><><<<<><<<>>>><<<>>><>>>><>>>><<<><<<>>><<>>>><>>><><<<<>><<>>><<<>><<>>><<<<><<<<>>>><<><<<><>>>><<<>>><<>>>><<<<>>>><<<<>>>><>><<<<>>><>>>><<>>>><<<><<>><<<>>><<<><<>>><<<<>>><<<<><<>>>><<>><<<>>><<<<>><<><<<<>>>><<><<>>><<<>>>><<<><<>><<<>>>><<><<>>>><>><<<<>>>><<>><>><<>>><<<><<<<><<<<>>><>><><>>><<<>>><<>><><<>><<<>>><<<>><<<<>>><<<<><<<><>><>>><<<<>>>><<<<>><<<<>><>>>><>>>><>>>><<<<>><>>>><<>><<<>>><<>><><>>>><<><<<<>><<>>><<>>><<>>><<<<>>>><<<<>><<<>>><<><<<<>><<<<>><<><>>>><<<>>>><<<><<>><<<<>>><<<<><>>>><<<<>>>><<>>>><<>><>>><>>><<><<<<>><<<<>><><<>><>><>>><<><<<>>>><<<>>><<<<>>>><<><<><>>><<<<><><<>>>><<<<>><<<<>><<>><<>>>><<>>>><<>>><<<>>>><<>>>><<<<>><>><>><<>>>><<<>>>><<<<>><<<>>><<>>><<<<>>>><>>>><<>>><<>>>><<<<><<>>><<<<>><<<>>>><><<<>>>><<<>>><<<<>>><<<<><<><<><<<<>>><<<>><>>><>><<<<>>><<<<>>><<><<<<>>><>>><<<>>><<>>>><<<>><<>>>><<><<<>><<<>>><<<<>>>><<<<>>>><>>><<>>><<<><<<>>>><<>>>><<><<<><>>><<>><<><<<<>>><>><>>><<<><><<><<<>>><<<><><<>>><<><<>><>>>><>><<<>>><<<>>>><<<>><<<<>>><>>>><<<<>><<<<><<<<><<<><>><<<<><<>>><<<<>>>><<<>>><<<>>>><>>>><<<<><<<<><<<<><<>><><<<<>>>><<<<>><<<>>>><<<>><<<>>>><<<>>>><<<><<>>><>><<<>>><<>><<<>>><>><<<>>><<<<>><>>>><>>>><><>>>><<<>>>><<<<><<><<><>><>>>><><<>><<<>>><<<<><>><<>><>>>><><<<>>>><<<>>>><<>>>><>>><>>>><<<>>><>><<<<><<<<>>>><<<<>><<<>>><<>>><<<<>>><<<>><>>><<><<<><<>>><<>><<>>><<<<>>><<<>>>><<<<><<<<>>>><<<>>>><<<<>>>><<><>><<<><><<>>>><><<<>>><<>>><<>>>><<<<>>><<<>>><<<<>>>><<>>><<<>><>>>><<>><<<><<><<<>><<<<>>><><>>>><><<><><<>>>><<>>>><>><><>>>><<<><<<<>>>><<<>><<<>><<<>>><<<>><<<>>><<<><<<>>>><<<<><<>><<<>>><<<<>>>><<<<>><<<<>>>><>>><<><<>>><><<<>><<><<<<>>><<<<>>><<<<>><<<>>><<<<><>><<>>><<<<>>><<<>><<<>><<<>>><><<<>><<>>><>><>><<>>><<<>>>><<<>>>><<>>><>><>><<>>><<>>>><<>>><><<<>><<>>><<>><<>><<<<>>>><>>>><<>><<<><<>><<<<>>>><<<<>><<>><>><<<>><<<<><<><<>>>><<>>>><<<>><<<<>>><<<<><<<>><<<>><>>>><>>>><<><>>>><<<>>><<<<>>><<<>><<<<>>><<<><<<>>><>>><<<<>><<>>>><<>><<<>><<<>>>><<<<>><<>>><<<<>><<>>>><<><<<>>><<<<>><>>>><<<<>>>><>>>><>>><<<>>><<<>>><>><>>>><<<<>>><<<<>>><<>>><>>><><<<>><<<<>>>><>>>><<<>><>>>><<>>>><<<><<>>><<<<>>>><<><>>><<<<>><<<>>><>>><<>>><<<><>>><<><<<>>>><<<<>><>>>><<><<>><>>><<>><>>>><<<<>>>><<<<>>><<>><<><><<<<>>>><<>>><<<>>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<><<<>><<<<>>><<<<>><<<>>><<><<>><<<<>>><<<<>>><<><>>><<<><<<<>>>><<<<>>>><>><>>><<<>>>><<<><<>>><<>><<<<>>><<<<><<<><<<>>><<>><>><>>>><>>>><><<<><><<<<><>>>><<>>><>>>><<>>><<<<>>>><<>>><>>>><<<>><><<>>>><<>>><<<>>><<<><<<>><<<>>><<<>>><<><<>><<<>>><<<<>>><<>>><>>><<<<>>><<>>>><<<><<<<>>><>><<<<>><>>><<>><>>>><<><<<<>>><<<<>><<>>><<<>>>><<<<>>><<<>><>>>><<<<>>><>>>><<>><>>><><>>><>>>><<<<>><<<><><<>><>><<<><<>>><<>>><<>><<<>>><<<<>><>><<<>><<<<>>>><<>>><>><<<<>>><<<><<>><>>>><<><<>>><<<>><><<<>>>><<<<><<<<>>>><<<>>><<<><>>><<<>>><<<<>><<<><<>>>><<<<>>>><<>><><<>>><<<<>>><>><<<<>>><>>>><>>><<<<>>><<><<<>>>><<<><<<>>><<<<>>><<<>>>><<<>><>><<<<>>>><<<<>><<<><>><<<><<>>>><<<>><<<<>>><<<<>>>><>><<<>>><<>>><<><<>><<<<>><<<<>><>><<<>>>><<<>>><<<>>><<>>>><<>>>><<>><<>><<>><<>><<>><<><>><>>><<<>>><<><<<<>>>><><<<>><<<<>>>><>><>>>><<><<<><>>";
//">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";

const EMPTY = '.';

const Y_LENGTH = 50000; // Hope it's enough
const NUMBER_ROCKS = 2022;

const X_LENGTH = 7;
const SHAPES = [
[{dX : 0, dY : 0}, {dX : 1, dY : 0}, {dX : 2, dY : 0}, {dX : 3, dY : 0}],
[{dX : 0, dY : -1}, {dX : 1, dY : -2}, {dX : 1, dY : 0}, {dX : 2, dY : -1}], // The block between four blocks is not counted !
[{dX : 0, dY : 0}, {dX : 1, dY : 0}, {dX : 2, dY : 0}, {dX : 2, dY : -1}, {dX : 2, dY : -2}],
[{dX : 0, dY : 0}, {dX : 0, dY : -1}, {dX : 0, dY : -2}, {dX : 0, dY : -3}],
[{dX : 0, dY : 0}, {dX : 0, dY : -1}, {dX : 1, dY : 0}, {dX : 1, dY : -1},]
]; // Coordinates of blocks, relative to the "bottom-most" and the "leftmost"
const FULL_CYCLES = Math.floor(NUMBER_ROCKS/SHAPES.length);
const REMAIN = NUMBER_ROCKS % SHAPES.length; 


var globalData = {

}

function startGlobalData() {
	globalData.indexGasToPush = 0;
	globalData.acroY = Y_LENGTH;// acroY = lowest value of Y, but highest point in the cave.
}

var fullArray;
function conclusion_17_1() {
	startGlobalData();
	fullArray = generateDoubleEntryArray(X_LENGTH, Y_LENGTH, EMPTY);
	var yBottomStart;
	var i, j;
	for (i = 0 ; i < FULL_CYCLES ; i++) {
		for (j = 0 ; j < SHAPES.length ; j++) {
			fallDown(fullArray, j);
		}
	}
	for (j = 0 ; j < REMAIN ; j++) {
		fallDown(fullArray, j);
	}
	console.log(Y_LENGTH - globalData.acroY);
}

function fallDown(p_array, p_ir) { // Index of rock
	const xLeft = 2;
	const yBot = globalData.acroY-4;
	const rockDataCoors = SHAPES[p_ir];
	var coorRock = [];
	var i;
	// Initialize the rock
	for (i = 0 ; i < rockDataCoors.length ; i++) {
		coorRock.push({x : xLeft + rockDataCoors[i].dX, y : yBot + rockDataCoors[i].dY});
	}
	var dX, canPush;
	var nx;
	var canFall = true;
	while (canFall) {
		
		// Try to push the rock sideways
		dx = rawData[globalData.indexGasToPush] == '>' ? 1 : -1;
		globalData.indexGasToPush++;
		if (globalData.indexGasToPush == rawData.length) {
			globalData.indexGasToPush = 0;
		}
		canPush = true;
		for (i = 0 ; i < coorRock.length && canPush ; i++) {
			nx = coorRock[i].x+dx;
			if (nx == X_LENGTH || nx == -1 || p_array[coorRock[i].y][nx] != EMPTY) {
				canPush = false;
			}
		}
		if (canPush) {
			for (i = 0 ; i < coorRock.length ; i++ && canPush) {
				coorRock[i].x += dx;
			}
		}
		// Try to make fall the rock
		for (i = 0 ; i < coorRock.length && canFall ; i++) {
			ny = coorRock[i].y+1;
			if (ny == Y_LENGTH || p_array[ny][coorRock[i].x] != EMPTY) {
				canFall = false;
			}
		}
		if (canFall) {
			for (i = 0 ; i < coorRock.length ; i++) {
				coorRock[i].y++;
			}
		}
	}
	for (i = 0 ; i < coorRock.length ; i++ && canFall) {
		p_array[coorRock[i].y][coorRock[i].x] = ""+p_ir;
		if (coorRock[i].y < globalData.acroY) {
			globalData.acroY = coorRock[i].y;
		}
	}	
}

// ---

// Part 2 : the only way to proceed is to find a way such that it's cyclic. (both in the rock order and the gust order)
// There are 5 rocks, and we must hope there are 10091 (or whatever the length) down pushings
// Luckily, the very first rock was the only one to hit the ground. So we also to make sure that the first rock after all the one fall actually falls on top of the highest point of the previous tower. If so, the cycle will be seen.
// And we need to clean the array from time to time.

const Y_ALERT = 50;
const Y_FIRST_CLEANED = 4*Y_ALERT;
const Y_SHIFT = Y_LENGTH-Y_FIRST_CLEANED;

function cleanupIfNeeded() {
	if (globalData.acroY < Y_ALERT) {
		for (y = Y_FIRST_CLEANED ; y != Y_LENGTH ; y++) { // Slighty optimizable but who cares.
			for (x = 0 ; x < X_LENGTH ; x++) {
				fullArray[y][x] = EMPTY;
			}
		} 
		for (y = 0 ; y < Y_FIRST_CLEANED ; y++) {
			for (x = 0 ; x < X_LENGTH ; x++) {
				fullArray[y+Y_SHIFT][x] = fullArray[y][x];
			}
		}
		globalData.numberShifts++;
		globalData.acroY += Y_SHIFT;
	}
}

function findCycle() {
	startGlobalData();
	globalData.numberShifts = 0;
	fullArray = generateDoubleEntryArray(X_LENGTH, Y_LENGTH, EMPTY);
	var i, j, x, y;
	const firstShapeCycleThisGust = [];
	for (i = 0 ; i < rawData.length ; i++) {
		firstShapeCycleThisGust.push(-1);
	}
	var numberCyclesPassed = 0;
	do {
		for (j = 0 ; j < SHAPES.length ; j++) {
			fallDown(fullArray, j);
		}
		cleanupIfNeeded();
		numberCyclesPassed++;
		if (firstShapeCycleThisGust[globalData.indexGasToPush] != -1) { // Well, there was no periodic state searched here
			return {
				numberOfCyclesNow : numberCyclesPassed,
				numberOfCycles1stObserved : firstShapeCycleThisGust[globalData.indexGasToPush],
				nextGustIndex : globalData.indexGasToPush,
				currentHeight : Y_LENGTH-globalData.acroY + Y_SHIFT*globalData.numberShifts,
				currentAcroY : globalData.acroY,
				currentnumberShifts : globalData.numberShifts
			}
		} else {
			firstShapeCycleThisGust[globalData.indexGasToPush] = numberCyclesPassed;
		}
	} while (true);
}

function makeFall(p_numberCycles) {
	startGlobalData();
	globalData.numberShifts = 0;
	fullArray = generateDoubleEntryArray(X_LENGTH, Y_LENGTH, EMPTY);
	var i, j, x, y;
	for (i = 0 ; i < p_numberCycles ; i++) {
		for (j = 0 ; j < SHAPES.length ; j++) {
			fallDown(fullArray, j);
		}
		cleanupIfNeeded();
	};
	return {
		data : fullArray,
		height : Y_LENGTH-globalData.acroY + Y_SHIFT*globalData.numberShifts,
		currentAcroY : globalData.acroY,
		currentnumberShifts : globalData.numberShifts,
		nextGustIndex : globalData.indexGasToPush
	}
}

/*
findCycle(), results :


	currentAcroY: 7246
	currentHeight: 2754
	currentnumberShifts: 0
	nextGustIndex: 359
	numberOfCycles1stObserved: 13
	numberOfCyclesNow: 355
	[[Prototype]]: Object

 So it takes 342 cycles to have a full pattern. 
 It repeats when the number of rock cycles is 13, 355, 697, 1039, 1381... let's see this !

 13 shape cycles : height 107, next index 359

Acroest floors (9893-9899) : 
(7) ['.', '.', '4', '4', '.', '.', '.']
(7) ['.', '.', '4', '4', '.', '.', '.']
(7) ['.', '.', '3', '.', '.', '.', '.']
(7) ['.', '.', '3', '.', '.', '.', '.']
(7) ['.', '.', '3', '2', '.', '.', '.']
(7) ['.', '.', '3', '2', '.', '1', '.']
(7) ['.', '2', '2', '2', '1', '.', '1']

 355 shape cycles (height 2754) / 697 (height 5401) / 1039 (height 8048) : OK, it's +2647 and gust index 359 every time. And, mostly, the same shape 
 (not the one of after stage 13, though)
 
 */
 
const EXPECTED_CYCLES = 200000000000;
// So, height after 13 cycles = 107, and height after every 342 cycles then = +2647. Bu for too high values, makeFall doesn't work anymore...
 
function conclusion_17_2() {
	/*for (var i = 0 ; i < 50 ; i++) {
		answer = makeFall(13 + i * 342);
		console.log(answer.height + " " + answer.nextGustIndex);
	}*/
	// First 13 + (blocks of 342 cycles) + remaining starting from cycle 13, so "#remaining - 13"
	
	//return 107 + Math.floor((EXPECTED_CYCLES-355)/342) * 2647 + (makeFall((EXPECTED_CYCLES-13)%342).height - 107); 1547953213646, too low
	//return 107 + Math.floor((EXPECTED_CYCLES-13)/342) * 2647 + (makeFall((EXPECTED_CYCLES-13)%342).height - 107);  1547953216293, too low
	//console.log(107 + Math.floor((EXPECTED_CYCLES-13)/342) * 2647 + (makeFall(EXPECTED_CYCLES%342).height - 107));
	//console.log(2754 + Math.floor((EXPECTED_CYCLES-355)/342) * 2647 + (makeFall(355+(EXPECTED_CYCLES-13)%342).height - 2754));
	console.log(2754 + Math.floor((EXPECTED_CYCLES-355)/342) * 2647 + (makeFall(355+(EXPECTED_CYCLES-13)%342).height - 2754));
	if (EXPECTED_CYCLES < 60000) {
		console.log(makeFall(EXPECTED_CYCLES)); 
	}
	
	for (var i = 25 ; i < 8575 ; i+= 25) {
		//console.log(makeFall(i+342).height - makeFall(i).height);
	}
} // Correct answer = 1547953216393. YEEES ! (also I don't trust my makeFall method for too big values !)