const rawData = [
"5 + 9 + 5 + 9 * 9",
"5 * (9 * 3 * (6 + 8 + 2 + 5) * 2)",
"4 + (6 + 9) + ((9 * 7 * 5 * 9 * 9 * 8) + 6 + 2 * (7 * 7) * (9 + 7 * 9 + 4))",
"8 + (7 + 4 * 7 * 5 * 9) + 9 * 6 + 9 * 3",
"4 * (8 + 8 * (9 + 3 + 6 * 8) * 4 * 2 * 6)",
"(2 + 9) + (5 * 7 * 7 * (5 * 6) * 7 * 2)",
"4 + ((8 + 3 * 6) * 7 * 4)",
"(9 + 5 + 6 + 8) + (3 * 6) * 6",
"5 + 3 + (8 * 8 * 8 * 6 + (6 + 4 + 6 * 2 * 3) + 5) + 3 * 7",
"(4 * 7 + 8 * (2 * 5)) * 8 + 2 * (9 + 5 * 4 * (4 * 9 * 2) + 5 + 3) * 8",
"3 * 6 + (7 + (5 + 2 * 8 * 5) * 9 * (2 * 4 * 4 + 6 + 5 + 8)) * 9 * 5 * (2 * 4)",
"((4 * 3 * 5 * 2 * 5 + 6) + 3 * 6 * 7) + 6 + 8 + ((7 + 6 + 2 * 2 + 8) + 9 + 8 * 2 + (5 + 4 + 9 + 3))",
"4 + (5 * 2) * (3 + 7 * 7 + 9 * 6 * (9 + 4 * 8 + 7 * 6 * 8))",
"(3 + (8 + 8 * 7 + 8 + 4)) + 2 + 2 * (7 * 8) * (8 * 7 + 9)",
"(3 + 5 + (2 * 6 + 7 + 5 * 7)) + (4 + (5 + 3 * 7 + 8 * 9) * 7 * (9 * 7 * 9 + 3)) + 4",
"(8 * 5 + 3 * (5 + 8) + 6) * 2 + (9 + 2 + 7 * 4) * 6",
"2 + (5 * 7 + 8) + (8 + (3 * 3 + 4 * 2 * 2 * 2) * (5 * 8 + 6 * 6) + 8 + 5 + 8) + ((4 * 6 * 8) * 5 + 2 * 8) * 5 * 5",
"(7 + (3 + 4 + 3) * 6 + 2 * (9 * 3)) + 5 * 8 + 3 + 8",
"((2 * 5 * 8) + 6 * 2 + 8) + 2 + 4",
"3 + 9 + (3 * 5 * 5 * (4 * 9) * (9 * 8 + 2) + (7 + 3 * 3 + 6 * 7 + 4)) + 4 * (7 + 9 + 5 + (7 * 8 * 7 + 6 * 9 * 3) + (5 + 3 * 5 + 4 * 2) + 9) + 6",
"3 + 9 + 2 * 5 * 7 + ((5 * 7 * 4 + 3 + 6 * 2) * (9 * 4 * 9 * 3 * 2) * 6)",
"6 + 9 + 2 + (2 * (8 + 4 + 7 * 5 + 2) * 4 + (4 * 2 * 3 + 3 + 3 + 2) + (8 + 2 + 6 + 2) + 5) + 9 + 4",
"((2 * 8) * 7) + 4 + 3 + 3",
"6 + 4 + 3 + (4 * 9 + 6 * 8 * (4 * 6 * 2))",
"(4 * 7 + 3 + (9 * 2) + 5 + 4) + 8 * 6 * 5 * (4 * (2 + 3) * 5 + 3 + 4)",
"8 * 8 * 8 * (3 * 8) + ((3 * 6 + 3 * 4 + 2) + 6)",
"3 + 8 + 8 * ((7 + 8 + 3 * 8) + 7 * 6 + (7 * 6)) + 9",
"((6 + 8 + 2) * 2 * (7 + 4 * 2 * 6 * 5) + 9 + 8) * 3 + (5 * 4) + 8 * 7",
"9 * 5 * ((9 * 8) * 3) + ((9 * 4 * 6 * 8 + 9) * 4 + 9) * (6 * 3 + 3 + 9) * 4",
"(2 + 8 + 9 * 8 * 2 * (7 + 7 * 5 * 4)) * 7 + 8 + 5 * ((8 + 3 * 9 * 4 * 9 * 9) + 7 * (2 * 9 * 7) * 8 * 4)",
"8 + ((9 + 3 + 3 * 8) + 4)",
"(4 * 5 + 3 * 7 + 9) + 6 + 7 * 8 + 9",
"(3 * 8 + 4) * 8 + 5 * (7 * 4 * 5 + 8 + 4) * 4 + 6",
"2 + 5 * ((3 + 8 + 4 + 9 + 8) + 9 + 9 + 9 + 9 + (5 + 5 * 6)) + (2 + 8 + 3)",
"((4 * 3 + 7) * 4) + (2 + 3) + 5 + 2",
"(8 * 5) * 5 + 7 * 8 * 7 * 9",
"9 * 8 * 9 + 3 + (8 + 6 * 5 + (5 * 8 + 8 * 5 * 3) * 9) + (3 * 3 * 8)",
"(4 + (6 + 9 * 7 + 8 + 7 + 8) * 2 * 4) * 2 + 8",
"(3 + 6 + (8 + 3 + 9 + 3) + 5) * 7 + (8 + 9) + 6",
"(4 * 2 + (8 + 9 * 7 + 6) * 8) * (6 * 5 * (8 * 7 + 2 + 2 * 7 + 3) + (8 + 5 * 9 * 9 * 2 + 4) + (7 * 2 + 4 * 9 * 9 * 6)) + (5 + 6) + 6 + 2 * (9 + (9 * 2) * 9)",
"2 * (9 + 9 * (4 + 7) * (9 * 5 * 8 * 2 + 3 + 4) + 4) * (6 + 9 + 3 * 4 * 3) + 6",
"9 + 9 * 7 * ((6 * 6 * 7 * 3 * 9 + 8) * 3) + 4 + 3",
"3 * (3 * 9 + 7 + 4) + 7 * 5",
"8 * (6 * 2 * (6 + 6 * 6 * 8) + 6) + (7 + 6 + (8 + 5 * 3 * 2 + 2) + 4 + (2 + 6 * 2)) + 3 + 2 * 7",
"6 + 6 + 7 * (9 + 7 + 8)",
"4 * 9 + (6 * 5 * 4 + 3 * (8 + 7 * 3 * 4) * 5) * 4 * 9",
"2 + (7 + (4 * 8 * 5 * 4 * 6) + 8 * (9 * 5)) * 7 + 4 * 7 + 7",
"((5 * 3 + 2 * 9 + 3 * 8) * 2 * 6 * 2) + 7 + 9 * 3 * 2",
"(9 * 6 * 3 * 3) * (3 + 7 + 5) + 2",
"(4 + 9 * (7 * 2) + 8 + 8 + 8) + (7 + 6 + 4) + 3 * 6 * 7",
"(8 * 8 * 5) + (6 + 8 + 4) * 5 + (2 + 6 * (5 + 9 + 8 * 7 * 4 * 5) + 8)",
"((9 * 7 * 6) * (2 + 7) + 5 + 5 * 7 * 7) + 6 * (6 + (2 * 6 + 9 + 6 + 7 * 9)) + 3",
"2 + 8 * (6 + 5 + 8 + 7 * 7 + 9) * 5 * 3",
"2 + (2 + 9 + 8 * 2) + (6 + 2 + 2 + 7) * 5 * 9 * 3",
"9 + 6 * 4 * (2 + 7 + 9 + 8 + 8)",
"2 + 2 + 9 + 9 * (7 + 9 * 9) + (5 * 3)",
"3 + 9 + 4 * 3",
"(3 + (8 + 8 + 8)) * 7",
"8 + 6 + (8 * 8 + 8 + 5 * 3 * 3) + (6 + 8 + 5 + 6 + 9 * 7) + 2 + (3 + 2 + 2)",
"((2 * 9 + 7 * 6 + 5) + 6 + 7 * 8 + 4) * 2",
"((9 * 6 * 3) * 8 + 6 + 9 * 6 * 2) + ((9 + 4 + 9 + 9 + 4) * 5 + (3 + 5 * 4 + 4 * 7) * (4 * 2 * 2))",
"2 + (5 + 5) + 2 * 7 + 6 * 9",
"3 * 6 * ((4 + 2 + 9) * 4 + 6 * 6 * 9) * ((4 * 8 + 2 * 4) + 8 + 2)",
"8 * 4 * ((2 * 7 * 9) * 2)",
"3 * (7 + 9) + 6 + 3 + 4",
"6 * 8 + (6 + 8 * 9) + (9 + 7 + 9 * 3 * 7 * 3) * 5",
"3 * 8 * 6 + (6 + 5) + 4",
"5 + 6 + (8 + 3 * 7 * 8) + 8 * 7 + (4 * 5 + 4)",
"(2 + 6 + 3 + 8 * 6 + 4) * (5 + 3 + 9 * 5 * 7) + 6 * 5 + (3 * 7 * 5 + 7 * 2) * 7",
"3 * (2 * 4)",
"(7 * 3 + 4) * 3 + 2 + 2 * 9 * 3",
"((6 + 8 * 3 * 3 * 3 * 3) * 2 * (8 + 3 * 2 + 5 * 2 + 5) * (8 + 7 * 8 * 7) + 9 + (5 + 8 + 7 * 2)) + 4",
"5 + 4 * 9 * 7 + ((8 * 4 * 8 + 2 + 5 * 4) * 6 + 6 + 3 * 3)",
"7 + (2 * 2 * 5 + 7 + 6 + (9 * 8 * 2 + 5)) * 2",
"(2 * (8 * 4) + 8 + 8 * (2 + 4 + 4 * 4 + 4 + 4) * 5) * 7 + 8 * ((7 + 8 + 4) * 6 + 8 + 7 + 2 * 9)",
"7 + 5 + 6 * 4 * (2 * 3 * 8 * 2 + 4)",
"(5 * 2 * 6 * 5 * 8) + 2 * 9 * (3 + 4 * 9 * 4 + (3 * 8 + 5 + 3) + 8) + 4",
"4 + 5",
"3 * ((3 + 6) * 7 * 5 * 9 + 6 * (3 + 4 * 3 * 5 + 2 + 3)) * 6 + 4 + 2",
"9 + ((6 + 2 + 5 + 8) * (3 * 8 + 8 * 2 * 9) + (9 + 2 + 6 + 5 + 9)) * 9",
"7 * (6 + 6 * 7 * 5 * 3 + 8) + 7",
"(9 * 8 * 3 + 4) * 4 + (4 + 2 + 7) * 8 + 9",
"3 * 7 * (3 + (5 + 6 + 7) * 5 * 8) + 7 * 6 + ((8 + 8 + 8 * 2 * 2) + 2 + 6)",
"((9 + 5 * 6 + 2 * 7 * 6) + 9 + 2 * 4 * 8 * 5) * 8",
"(7 * (8 * 5) * 7) + 9 * (7 * (8 * 5) + 2 * 9) * 7",
"(7 + (9 * 3 * 3 + 3)) + (3 * 7) + 3 * 2 * (4 * 9 * 5) + 6",
"7 + 6 * (4 + 7 + 6 * 3 * 8 * 3) + ((5 * 8 + 8 + 2) * 8) * ((2 + 4 * 8 * 9 * 5) * 2 + 3 + 7 + 2) + 5",
"((7 * 8 * 6 * 5 * 9 + 7) + 3) + (3 + 4 * 2) * 2",
"4 * 5 * (3 + 2) + 7 * 8 + (7 + 7 * 5 + 2)",
"(6 + (7 + 9) + 6 + 4 * 9) * 7 + 7 + 7 + 9",
"(4 + 7 + (7 + 3 * 3 * 8 * 9 * 7) * 6 * 4 * 2) + 8 * 9 + 2 * (8 + 2 + (2 + 9)) * (2 * 6 + 2 + 4 + 3)",
"9 * 5 + 3 * (4 + (5 * 4 + 6 + 8 + 6 + 6) * (8 * 3) + (5 * 9 + 2 + 2)) * ((9 + 8 * 3 * 6) + 3)",
"8 + 7 * 2 * (5 + 2 * 4 * 8 + (9 * 4 * 6 * 8) * 4) + 3",
"5 * 6 + 5 + 9 + (4 + 6 * 6 * 2 + 9 + 7)",
"3 * (2 + 9) + 2 * 5",
"(5 * 9 * 7 + 7) + (9 * 3 + 5 * 6)",
"2 * 9 + (7 + 4 + (8 + 8 + 7)) + (3 + 4 + 5 + 6)",
"7 * ((9 * 7 * 7) * (8 * 8) * 3 * 3) * 3",
"9 + (6 * 7) + 7",
"(5 + (2 + 5 * 8 + 8) * 3 + 7) + 2",
"(8 * 9 * (5 * 3 * 9 * 8 + 5)) + (6 * 7 * 6 + 3 + 7 + 6) * 5 + 9 + 5 + (3 + (9 * 3 * 3 * 3 * 3 * 5) + 5 + (4 + 8 * 3) * 2 + 2)",
"3 * 6 + 3 + 8 + (8 + 9) + 2",
"7 + 9 * 5 + (8 * 8 * 5 * 9) * (3 * 5 + 3) + 9",
"2 + 5 + 8 + (2 * 5 * (4 * 9 + 3 + 9)) + 9 + 4",
"3 * 8 + (6 * 4 + 5 * 2 * 5 * 2)",
"(3 * 3 + 5 * (6 + 4 + 9 * 5 * 2) * 6) + 9 + 5 * 4 * 6 + 6",
"4 * 6 * (2 * 9) * 7 + (4 * 2 * 5 + 7) * 3",
"(6 * 7 + 3) * 2 + (9 + 4 + 7)",
"9 + ((7 + 2 + 3 + 2 + 3) * 6 * (9 + 2) + 9 + 2 * 9) + 7 + 3",
"8 + 2 + 2",
"5 * (2 + (3 + 3 * 8 + 2) * 9 + 7 * 9) + 5 * 4 * 6 + 3",
"9 * 4 + (4 + (7 * 2 + 4 + 7) * (5 * 2 + 5 + 8) * 8) * (7 * 5)",
"9 + (2 * 8 * 5 + 3 + 9 + 4) * (9 + 2 * 3) + 9",
"((9 + 8 + 7 * 2) * 2 * 9 * (2 * 2 + 6 + 5) * 6 * 9) * 4 * (3 + 5 * 2 + 6 + 2 * 6) + 3 * (9 * 4 + 9) * 9",
"7 * (3 + 5 * 9 * (6 * 2 * 4 + 3)) * 7",
"5 + (9 + (5 + 3 * 9 + 4 * 7) + 8 + (9 + 8 * 7) * 6) + 5 * 2 * 8",
"9 * 9 * 5 * 9 + (7 * 3 + (6 * 3 * 9) * 7 + (5 * 8 + 5)) + 7",
"(6 * 9 + (5 * 6 + 3 * 5 + 5) + (8 + 9 + 3) + 2) + (9 + 3 + 4) * 6",
"((9 + 3 + 4 * 4 * 8) * 8 * 4 * 8 * 6) + 6 + 8",
"(8 * (8 * 6) + 8) + (3 + 3) + 9",
"5 * 2 * 2 + 6 + 9",
"7 * 4 * (4 * 7 + 7 * 2 + 5 + 8) * 2 + (7 * 9 + 2 + 9 + 6 + 2)",
"7 * (2 * (4 * 2 * 4 + 7 + 5)) * 6",
"((8 * 5 + 2 * 2) * (9 * 2) + (8 + 9 * 2 + 3 * 9) * 8 + 7) * 6",
"4 * (9 * 2 * 4 + 8) + (8 + 3 * 7) + 6 * 9",
"5 * 9 * ((2 + 4) * 6 * 6) + 6 + 2",
"(3 + 5 + 8 + 7 * 5 + 8) * 6 * (2 + 9 * 8 + 8) + (9 * 2 * (3 + 2)) * 3",
"(9 + 4 + 3 * 7 + 8 + 3) * 6 * 6 + 2 * 2 + 8",
"5 * (8 + (3 * 8) * 4 * 9) + 6 + (8 + 3 + 2 * 3 * 3 * (6 * 5)) + 2 + 5",
"(5 * 8 + 7 * 2 + 7) + 2 + 3 * 5 * 8 + 6",
"9 + 6 * 4 * (4 + 4) + 8 + 9",
"5 * (5 * (4 * 8 * 2 * 9 + 3 * 2) * 9 + 3 + 9 + (7 * 4 + 4 + 7)) + 3 * 8",
"(5 + (7 + 5 + 8 * 8)) * 2 + 8 + (6 + 5 + 8 + 9 + 3 + (5 * 4 + 8 + 9 + 4)) + 3 * (3 * 5 + 2 + 3 * 7)",
"((8 * 3) * 3 + 3 * 7 * 8) + 2 * 5 + 3",
"(6 + 8) * 2 * 9 + 2",
"9 + ((8 + 4 * 5) + 8)",
"2 + 4 + ((9 * 2) * 7 * 9 * 6) * 3",
"3 * (9 + (3 * 9 + 9 * 8 + 8 * 2)) * 3 * 3",
"2 + (6 + (4 * 9 + 7)) * 2",
"5 * (5 * 3) + 3 + (7 * 4 * 4)",
"8 + (6 * 7 * (7 + 9 * 8)) + 5",
"9 * 5 * 3 + 6 + 2 + ((4 + 5 + 7) * (8 * 5 * 6 + 8 + 4))",
"9 + 4 * 4 + (3 + 6 + 6 * 5) + 5 * 7",
"4 * 7 + (5 + 2 * 9 + 3 + 8) * 5 * 3 * 2",
"3 * ((3 + 2 + 6) * 2 + (8 + 8)) * 8 + 5 * 9 * 4",
"8 * 2 + 9 + ((5 * 7 * 6 * 4 * 8 + 6) * (3 + 2 + 7 + 8) + 7)",
"5 * (7 * 5 * 6 * 4)",
"6 * 5 * 5",
"9 * 6 + (9 + 9 + 4 + 9 + (9 * 4)) + 8 * (4 + 3 * 5 + 8 * 5) * 8",
"3 + 7 + 6 + (6 + 6 + (9 * 8 + 4 + 3 * 4) + 4 + 4) * 5 + 7",
"4 + 8",
"(7 + 6 + 3 + 2 + 4 + 8) + 5 + 8 + (6 * 5 + 3 * (9 * 6 + 6 + 9 * 7) * 9) * 9 + 6",
"(5 + 4 * 8 * 2 + (4 + 4 * 9 * 9 * 4)) + (8 * 5) * 6 * 5 * 5",
"2 + (6 + (4 + 7) * 4 * (5 * 8 + 5) + (5 * 7 + 4 + 3 + 2 + 9) + 3) * 6 + 2 + (4 * 2) * 2",
"7 * 5 + 9 * 8 + ((6 * 4 * 6 * 6) + 7 + 2) * 9",
"5 + (2 * 8 * 2 * 9 + 7 * 2) * 3 + 6 * 3",
"6 * 9 * 3",
"8 * ((7 * 7 + 4) * 9) + 5 * 8 * (7 + 6 + 8 + 3)",
"(3 * 9 * 9 + 6 * 6) * 5 * ((2 + 3 * 2 + 2 + 6) * 7) * 6",
"(7 * 8 * 9 + (9 * 6 + 3) * 8) * 7 + 8",
"8 * 8 + 5 + ((4 + 7 * 4 + 9 + 9) + (2 * 9) + 9 * 3) + (9 + 2) * (3 + 7 * 6 * 5 * 9)",
"6 * 5 + 6 * 9 * ((3 + 9 + 7 * 6 + 9) * 4 * 7 * 4) + (9 + 9 + 3 + 7 + (7 * 7 + 9 * 7))",
"2 + 9 * (3 + 3 * (8 + 8 * 7))",
"5 + 8 * 2 * 8 + 2",
"6 * 2 * 2 + 4 + 6 * 8",
"7 * 7 * 7",
"2 * (7 * 9 * 9) + 8 + 8 * 4 * 8",
"(6 + 3 * 9 * 8 + 8 * 8) * (6 + 9 * 3 * (8 * 5 * 6))",
"(3 + 2 + 7 + 3 + (8 * 5 + 2 * 8 * 2 * 9)) + 3 * 8 * 2",
"4 * 7 + 9 + 8 + 6 + (8 + 8)",
"5 * (8 * (9 + 3 * 2 + 6 + 7 * 6) + 8 + 8 + 5 + 7) + 8 + 6 + 9",
"4 + 4 * ((3 + 8 * 8) * (3 + 8 + 7 + 8 * 6) * 8 * 8 * 9) * 9",
"(8 * 4 + 2 * (5 * 6 + 8 * 8) * 8) + 6",
"9 * ((2 + 9 + 9 * 5 * 3 * 3) + 2 + 5 + 3 * (4 + 4 * 7 + 6 * 9) + 7) + 3 * 4",
"(2 + 8 + 6 + 7 * 5) * 8 * (9 + 3 + 7) + ((6 + 3 + 4) + 6 + 5 + 4 * 2) + ((2 + 5 * 5 * 5 + 7) + 8) * 7",
"(6 * 7) + 4",
"5 + 2 + 6 * 6 * ((2 * 9) + (9 * 4 * 7 * 3)) + (2 + 5)",
"2 + 7 + 9 + (4 + 4 * 4 * 4 * 5) * 6",
"(8 * (5 * 4 * 8 * 2)) * (4 * 4 + 2 + (7 * 4 + 6 + 6))",
"6 * 4 * 4 * ((6 + 9 * 8) * 3 * 8 + 9 * 2) * 9 + (9 * (3 * 9 * 8 + 4 * 2 + 7) + 8 * 3 * 4 * 4)",
"6 + (6 + (8 + 4 * 4) * (7 + 5 * 9 * 3) * 4)",
"5 + (4 * 6 + 7) * 8 + 4",
"4 + 4 + 4 + (8 + 2 + (3 + 4)) * 7 + 8",
"3 + 6",
"2 * (2 * 8 * 2 * 3 * (8 + 4 + 3)) + 8 + (3 * 5 + 5 * 5 + 9) * 2",
"(2 + 9 * 5) * 8 + 5 + 9 * (5 + (6 * 8 + 4 * 7 * 5) * 2 * 3 + (9 + 5 + 5 + 7 * 6))",
"(8 + (3 + 8 * 7) + 3 + 7 * (6 * 5 * 7 * 7) * 5) + 4 + 2",
"9 + ((2 + 7 * 8 + 4) + 3 * 7 * 2 * 2 + (4 + 5)) * 6 + 7 * 7",
"2 + (7 + 7 * 3 * 6 + 4 * (6 * 6 * 9 * 4 + 3 * 2)) + (2 + 2)",
"4 * 2 * (2 + 8 * 2 * 8 + 3)",
"(5 * 4 * 8 * 9) + (9 * 7) * ((9 * 5 + 9 + 3 + 9 * 5) + 6 * 8 + 9) * (6 + 8 * 7 + (7 * 4 + 5)) + 9",
"((9 + 7 * 8 * 4) + 4) * 6 + 7 * 8 * 7 + (7 * (5 + 3 + 8 * 8 * 7) * 4 * 8 * 3 + 7)",
"7 * 3 + (3 + 3) * 6 * 9",
"2 + (2 * (2 * 5 + 2 + 8 * 9) * 9 * 5 + 9) * 7 + 5 + (7 + 4 * 8)",
"(9 * (4 * 3)) + 9 + 3",
"8 * 4 + (2 * 8 * (6 * 4 + 2 + 3 + 8 * 3)) * 5 * ((4 + 7) * 5 * 9)",
"2 * ((9 + 5 * 3) + 3 + 5 + 5 + 9) + (9 + 6 * 2 + (7 * 6 * 2 * 9 + 3 + 5)) + 7",
"(5 + 4 * 8 * 3 * 4 + 9) * 9 + 4 + 8 * 2",
"6 + (8 * 6 + 9 + 5 + (7 * 3 + 2 + 8))",
"3 * (3 + (8 + 8 + 9 * 4 + 5)) + 5 * 9",
"6 + 5 + (9 * (5 + 4) + 9 + 2 + 7 * 5)",
"(7 + 4 + 2 * 5) * ((4 * 9) + 4 * 5 + 7 + 2 * (6 + 2)) + 2 + 5 * 8",
"(2 + 8 * 8 + (4 * 9 * 4 * 2 * 3) + 3 * (7 * 6)) * 7 * (5 + 8 + 3 * 4) * 3",
"8 * 7 + ((8 + 9 * 9) * (4 * 7 + 8 + 8 * 5) + (8 + 9 + 9 + 8 + 6)) * 8",
"3 + (2 * 3 * 7 * 8 * 6) * (7 * 5 * 5 * 3) * (2 * 7 * 7 + 2 * 9) * (9 * 4 * 6 + 7 * 4)",
"4 + 8 * 4 + ((6 + 4 + 2 * 3) * 2 * 3 * 5 + 3 + 2) * 7 + 7",
"((4 + 4 + 6 * 6) + 9 + 3 + (8 + 6 * 5 + 7 + 4 + 2) * 7 * 6) + 2 * 4 + 3 * (7 + (7 + 4 * 2))",
"9 + (4 + (7 + 3 * 9 * 9 + 4 * 9) + 5 * 4 * 9) * 9",
"7 * ((7 * 5 * 7 + 2 * 2) * 2 + 3 + 8 * 9) * 6 * 5 * 6 * 3",
"9 * ((5 * 4 * 4 * 6 * 2 + 6) + 2) + (5 * 7 * 2) * (3 * (8 * 3 + 2 * 7 + 7) + 3 * 8) + 4",
"5 * 8 * 8 + 7",
"6 * 7 + 3 * 2 * (7 * 5 * 3 + (3 * 4 * 3 * 3 + 4)) * 6",
"8 + 7 * 9 * 2 + (8 + 6 + 4 * 5 + (6 + 2 + 2 + 7 * 6 + 7) + (9 * 5 * 9 * 3)) * (5 * 5 + 3 + 3 * (9 * 8 + 6 + 2))",
"9 + 8 + 4 * (4 * 9 + (8 * 2 * 3) * 3 + (4 + 9)) * (6 * 5 + 7) * (6 + 6 * 9)",
"6 + 6 + (7 + 7 + 8) + ((5 + 6 + 4 * 3 + 7) * 4) * 8",
"2 + (9 + 2 * 6 * (5 * 5 + 7 * 5 * 6 + 3) + 4 + 2) + (3 + 3 + 7 * (4 + 8 * 3 + 3 + 6 + 2)) * 8 + 9",
"((8 + 7 + 2 * 4 * 4) * 2 * 2 + 5 * 7) * 7 * 9 + 3 * (9 + 2 * (4 + 7 * 4)) + 3",
"7 * (2 * 5 + 4 + 3 * 7) * 7 * 3",
"2 + (3 + (4 + 7 + 6 * 8) + 8 * 8 * 4 * 4) * 3 + 5",
"(8 * 8 + 8 * 8 + 7) * 6 + ((8 * 8 * 8 + 8) + 3 * 5 * 8 + 3)",
"6 * 9 * 7 + 2 + 8 + ((3 + 3 + 5 + 5 * 9) * 7)",
"3 + 6 * (8 + 9)",
"8 + 7 + 8 * (2 * 7 + 7 + 3 * (2 * 6 + 9 + 2 * 4)) + 8 + ((5 * 6 + 8 + 8) * (5 * 6 + 7 + 7) + 5 + 6 * 6 * 2)",
"4 * 2 + (2 * (6 + 2 * 9))",
"3 + 5 + ((9 * 7) + 7 * 9 * 6 * 4) * 2 + 4 * 7",
"(5 * (9 * 9) * 2 * 4 + 6 * 6) * (8 * 6 * (4 + 9) * 5 + 8 * 6) + 6 + 9 * 9",
"8 + (7 + 7 * 8) + 6",
"(3 * 2 + (5 * 6) * 3 * 5) + 3",
"(2 + 8 * 6 + 6 + 4 + 7) * 7 * (3 * 9 + 2 * 8) + 3 * 5",
"4 * (2 * (4 * 5 + 3 * 7 * 5 + 8) + 8 * 2) * 9",
"(5 * 2 * 7 * 5) * 8 * 2",
"3 * (3 * 7 * (4 + 4 * 3 * 9 + 8) + 9)",
"6 * (9 * 3 * 9 + 7 + 2) * 2 + 9 * 3",
"6 * 3",
"(7 + 5) + 9 + 8 + ((4 + 7 + 3 * 5 + 7) + 7 + 2 * (7 * 2) * 8) + 6 + 8",
"6 * 5 * 9 * 4 * 8 * 4",
"7 + (6 * 7 + 6 * 6 + 4) + 6 + (5 * 9) + 4 + 9",
"(9 + 5 + (2 * 2 + 2) * 2 + (5 + 8 + 3 * 9 + 9 + 3) + 9) + (6 + 4 + 9 + 3 * (2 + 3) + 2) + (9 + (3 + 8 * 8 * 2) * 3 + 3 + 9 + 5) + (5 * 7 * 5) * 5 * 6",
"3 * 2 * (8 * 4 * 2) * 7 * (8 * (8 + 2 * 4 + 2 * 9) * (2 + 5 + 5 * 5 + 6)) * ((5 + 3 * 3 * 5 * 6 + 5) * 3 * 7)",
"7 * 8 + 8",
"4 + (8 * (8 * 3 * 2) + 3 + 3 * 4) * 3 + 7 * 8 * 6",
"2 * (2 * 6 + 4)",
"7 + (4 + 9 * (3 + 5 * 2)) + 5 + 6",
"(7 + 5 + 2 + 4) + 6",
"6 + 2 * 7 * 6 * (2 + (2 * 5 * 6))",
"3 * 3 * 6 + (2 * (6 + 9 + 2))",
"(2 + 5 * 6 * 3 + 2 * (6 + 4 * 9 * 5 * 7)) + 9 + (3 + 8 + 4 + 4 + 2 * 9) * 4 * 8 * (3 + 8 + 5)",
"7 * 5 + (9 * (7 * 2 * 4) + 5 * (4 + 9)) + 3 + 4 * (4 * (3 * 5 + 2 + 4 * 6) * 7 * (6 + 2 * 4 + 9) + 9)",
"(8 + 9 + 9 * 3 * 6 + 5) + 4 * 5 + 3",
"8 + 4 + (4 + 3 * 4) + 7",
"(4 + 8 + 8 + (8 + 7 * 6 + 8 + 5)) * 2 * 9 + (3 + 8) * 7 + 5",
"6 + (6 + 3) + (9 * 9 * (8 + 5) * 3) * (5 + 8 * 4 + 6 + 4)",
"((4 + 2 + 9 + 7 * 9 * 5) + 7 * 2 * (7 * 7 * 2) + 2) * ((7 * 3 + 5) + 9 + (7 * 4 * 8) + 4) + 2 * 8 + (3 + 3 + 6 * 9) * (6 * 2)",
"9 + 6 + 3 + 5 + (3 * (7 + 5 + 4 + 4) + 5 * (6 + 5 + 7 * 6 * 4 * 3) + 7 + 5) * 8",
"(3 + 6 * 5 + 9 + 8 + 8) * 6 + 6 + ((2 * 5 * 8 * 4 + 7 * 9) * (9 + 6 + 7 + 4 + 3) * 6 + 5 * (5 * 3 + 9 + 3 + 2))",
"(3 * (3 + 8)) * 2",
"2 * 4 + (9 * 6 + 4 * 5 * 9) * 3 + (6 + 6 + 4 * 9 + 5) * 6",
"3 + 8 * ((6 * 4 * 9 + 2) * 8 * 3 * 6) + 5 * 3 + 8",
"2 + (3 * 5 * (2 + 8) + 4 * (6 + 9 * 9) * 9) * 6 + 6 + 6",
"4 * 5 * (3 + 9 + (2 * 7 * 3 * 9 * 5) + 8 + 7)",
"2 + 6 + (7 * 4 * (8 * 8 + 7 * 5) * 9 + 7) + 3 + 2 + 6",
"6 + 6 * 4 * 6 * (3 + 4 + (9 + 9) + 5) + 7",
"8 + 6 * 8 + 4 * (2 + 8 + 5 * (4 * 9 + 5 * 4) * (6 * 4) * 2) + 9",
"8 * (5 + 4 * (6 + 7 + 6 + 2 * 3) + (3 * 9) * 9) * 8 * 4 * 3",
"(7 * 4 * 2 * 6) * (9 + 8 + 5 * (3 + 5) * 9 * 3) + (3 * 7) * 8 * 3 + 4",
"2 * 8 + 4 + 8 + 9 + 2",
"5 + (7 * 2 + 8) * 7 * 9 + 8",
"((3 * 7 + 9 * 4) * 2 + (8 + 8 * 2 * 5 + 4 * 6)) * 3",
"(3 * 5 * 4 + 5 * 6) * (5 + 7 * 4) * 3 * ((7 + 2 * 2 * 6) * 8 + 7 * 3) * 8 + 9",
"2 + (5 + 4 + 4 * (2 + 5 * 3 * 2 * 2) + (7 + 9 * 3 * 2) * (3 + 2 * 9)) * 2",
"(4 + 5 * 3 + 9 * 3) * (3 + 7 * 4 + 2 + 5 + (3 + 5 + 2 + 2 + 9)) * (5 * 2 * 5) + 4 * 2 + (5 + 9 + 7 + 5 * 5 * 2)",
"2 + (9 * 3 * 5 + 8) + 8 + 7 + (8 + 9 + 6 + 2 * 3) * 2",
"2 * 8 + 3 * (5 * 8 + (2 * 9 * 2)) + (4 + 4 + (7 + 3)) + 6",
"3 * ((9 * 8 * 6 + 7 * 6 * 5) + 9 + (5 + 5)) + 2",
"4 + 5 + 8 + (5 + 9 + (9 * 9 + 6 + 3 + 3 * 7) + (7 * 8 * 9 * 9 + 4) * 2) * 2",
"(4 * 8 * 8) * 3 + 9",
"((4 * 6 + 9) + 2 * 3 * 8 * 4 + (9 + 3 + 7 * 4)) * 3 * (8 + 7 * 2) + 2 + 3 + (2 * 6 * 9 * 6 * (5 * 8) * (4 * 3 + 3 + 4 * 6 + 9))",
"3 * (8 * 8 * 7 + 4 * 5 + (2 + 6 * 4 + 4 + 9 * 8)) + (9 + 9 + 8 + 6 + (8 * 6) + 3) * 6",
"6 * 2 + 3 * 5 + (2 * 7 * 7 * (7 * 9 + 6 + 2 + 5 + 7) + 6)",
"5 * 2 + 4 + 5 + (7 * 3 * 7 + 3 * 6 + 4) + 8",
"7 * (8 * 3 * 7 * (6 * 6 + 5 * 3 * 3) * 6) * 4 * 3 * 8 * 4",
"(3 + 9 * 7 * 3) + 5 + 7 * 2",
"6 * 4 * 5 + 2",
"8 * 7 + (5 * 8 * 2 * 3) * (8 + 7) + 3",
"6 * (2 + 9 * 2 + (5 * 6 * 9 + 4 + 9 * 8)) + 6 * 8 * 2",
"7 * ((3 * 2) + 3 + 4 + 4 + 7) * 7",
"8 * 9 * (3 * 7 * (9 + 4 * 7 + 6 * 7) * 8) * 8 * 9 * 4",
"(6 * 3 * (4 + 5 + 8 * 5) * 5 * 4) * 2 + 3 * 2",
"6 + (7 * 4 + 4 + 3) + 2 + 8 * 4 + 6",
"3 * 8",
"(7 + (2 * 5 * 5 * 4 + 7) * 7 * (5 + 2 * 4 * 5 + 8 * 4) * 8 + 2) * 7 * 7",
"(7 + 6 + 8) * (9 + 8) + 3 + 7",
"(6 + 5 * 3 + 6 * (3 * 5 + 9 * 6) * (7 * 9 + 8 * 4 + 2 + 4)) * 3 * 6 * 7 * 4 + 9",
"((3 * 8) + (8 * 4 + 8 * 5 * 7 + 4) + (9 + 9 + 5 + 8) * 2) * 2 + 7",
"8 * (8 + 2 + (2 + 8) + 7) * 4 + (6 + 8 * 8) + 5",
"(3 + 5 + 3 + 9 + 3) * 5 + 2",
"3 + 4 * ((6 * 8 + 8 + 5) + 9 + 6 + 3) * (2 + 8 + 4 * 6)",
"(9 + 9 * (6 * 3 * 5) * 6 + 7 * 6) + 8 + 9",
"2 * ((9 + 8 + 3 * 6 + 6 + 3) * 5) * 7 + 9 * 3 * 4",
"4 + (4 * 8 * 6 * 6 * 8) * 7 * (2 * 4 + 6) * 5 * 8",
"((3 + 6) * 9 + 9 * 8 + 3) * 8 + 2 * (5 * (8 * 8 + 2) * 6 + 4 * 3 * 2) + (2 + (6 + 7 + 3 * 3) + 5 * 5 * 7)",
"(3 + 5) * 9 + 9",
"(8 * 2 * 9) * (7 * 6 + 9 * (2 * 4 + 2 * 5 * 7)) * 5",
"3 * 6 * (9 + 7) * 3",
"(9 * 4 + 6 + (5 + 2 * 7 + 5)) + 7 * (5 + 7) * 9 + (4 * 9 * 7 * 8 + 3 + 7) * ((4 * 9) * 8)",
"((4 * 2 * 5) * 2 + 4 + 6 * 3) * (9 + 2) + 9 + 6 + (5 + 6 * 7 * 5)",
"((7 * 7 + 2 + 2 * 8) + 7 + (9 * 3 + 8 * 7) + 3) + 3",
"9 + (6 + 5 * (4 * 3) + 9 * 5) * 2 + ((7 + 5 + 3 * 8 * 8) * (2 * 7 + 4 * 6 * 7 * 2)) + (9 + (9 + 8 * 5 + 5 + 5 * 4) + (6 + 8 * 7 * 8 + 8 * 7)) + 4",
"6 + 2 + (2 + 4 * 6) + 4 * 3",
"5 + 5 + 3 * 9 + 2",
"(9 + 7 * 3) * 7",
"7 * 6 * 9 * 5 + 8 * 2",
"(7 + (9 * 9 * 3)) * (5 * (8 * 9) + 9 + 7 * 5) + 3 + 4 * 4",
"9 + 2 * (3 + 4 + 8 + 2)",
"5 + 2 * (9 * 3 + (7 + 3 + 8 * 2 + 7 + 8)) + 4 * (8 + 4 * 9 * (6 + 7 * 2 * 3 + 3 + 3))",
"(6 * 2 * (3 + 6 + 7 * 3) * 4) + 5 + 6 + 6 * 3 + 6",
"6 + (4 * 4 + 8 + 2) * 2 + 4 * 5",
"3 * 5 + 9 * (4 * (3 * 9 + 7 * 7) + 8 * 8)",
"((3 * 8 + 3) * 5 * 6) * 8 * 7 + (9 * 8 * 8 * 2 * (5 * 4 * 2 + 2 * 6 + 6) * 6)",
"4 * 7 + (3 * 4 + 3)",
"9 + (2 * (9 * 7 + 4 * 6 * 9 + 7)) + 5",
"9 * (6 * (5 * 3)) + 9 * 4 + 3",
"9 + 5 * 3 * 3 * 3 + 2",
"3 + (7 + (3 + 2 * 6)) + 3 + 9 * 6 * 3",
"5 + 6 + 8 * 7",
"4 + ((7 + 6) * (8 * 5 * 6 * 7 + 8) + 2 * 3 + 7) * 6 * 4 * 8",
"((5 + 9 + 7 * 3 * 7) + (8 + 5 * 5 * 9 + 6 * 3) + 4 * 9 + 8 + 5) + ((9 + 4 + 2 + 3) * 2 + 5 * (2 * 5 * 5 * 4)) * 6 * 5",
"4 + (2 * (5 * 7 * 8 * 5 * 5))",
"(7 * 9) * 7 + (9 + 7) + 4 * 7 + (3 + 7 + 6)",
"(8 + 9 + 5 + 4 + 4) + 6 * 6 + 6",
"7 * 5 * (7 * 2 + 3 + (2 * 9 * 4 + 3 + 8 + 4) + 8 * 4) * 7 * 3",
"6 + 2 * 7 * 4 * 6 + ((6 * 2 * 8 + 4) + 6 * 9 * 4 + 6 + 5)",
"9 + 3 + 2 * (5 * 2 * 6 + 6 * 4) + 9 * 7",
"9 * 3 + 2 + 4 * 6",
"(2 * 3 + 2 * 3 + 4) * 8 + 8 + (2 * 2 * 6 + 9 + 2) * 8 + 3",
"2 + 4 * 3 + 5 * 4 + (3 * (9 + 4 * 7) + 7 * 5)",
"(2 + (7 * 5 + 7 * 4) * 8 * (2 + 9 * 5 + 7 * 7) + 5 + (8 + 9 + 5)) + 2 + (7 * 5 * 9 * 6 * 3 + (9 * 8 + 9 * 7 + 3)) + (3 + 5 + 7 + (5 + 2 + 2 + 9)) + 9 + 8",
"(9 * (7 + 6 * 4 + 3 * 8 + 4) * 4 + 2) * (9 * 2 * 2 * 6 * 2) + (5 + 5 + 8 + (8 * 3 + 9 * 9 + 6 * 5) * 8 * 7) + 8",
"7 + 7 * (3 + 8 * 6) * 2 * 8 + 2",
"(2 + 8 * 2 * 7 + 8 + 4) + ((5 + 9 * 2 * 8 + 9) * 6 * 2) + 4",
"8 + ((2 + 3) * 2) + 8 * 2",
"9 * 3 + 3 * 6",
"5 * 9 + (6 + 9 + 4 + 7) * ((4 + 4 + 4 * 3) * 6 + 4)",
"((9 * 7) * 9 + 8 + 5 + 7 * 8) * 9 + (2 + 8) * (6 * (2 * 4 * 7 + 2 * 6 + 9) + (7 * 5 * 3 + 9) * 9 + 5) * 6",
"6 + 3 * 6 + (2 * (7 * 5 + 4 * 9 + 7) + 5 * 2 + 8)",
"4 + 7 + (8 + (8 * 6)) * 6 + 6",
"6 * ((5 * 9 + 8 + 3 * 8) * (7 + 6 + 9) * (2 * 6 + 7 * 4 + 5) * (7 * 9 + 6)) + (2 + 5 * 7 * 6 + 9) * 3",
"5 * (9 + (3 + 4)) + 9 * (7 * 6 * 6 + 9)",
"6 * 5 * 2 + ((3 * 7 * 9 + 3) + (2 * 9 * 9 + 5) * 7) + 7 + 3",
"(6 * 3 + (6 + 8 + 3) + 5 + 6) + 4",
"6 * (8 * 8 * 9 * 6) * 9",
"7 + (6 + 2 + 2 * 8 * 4) * 9",
"3 + (8 * 8 + 6 + 4 + (2 + 9 + 8))",
"9 * (8 + 5 + (2 + 2 * 3 + 5 + 6) * 4) + 3 * 2 * ((5 * 8) + 6 + 2 + 6 + 8 * 7) + 4",
"9 + 8 * ((7 + 6) * 5 * (7 + 9) + 3 + 7) * ((7 + 7 * 2) + 6 + 7)",
"(5 + (2 + 3 + 2) * 8 * 4 * 5) * (3 * 8) * 8 * (7 + 8 + 3 + 2) + (7 + 3 * (6 + 7 + 3 + 2 * 8))",
"3 + 9 + (6 + 7 + (7 * 4 + 8 + 8 * 3) + 7)",
"8 + (7 + 5 * (8 * 6 * 6 * 9 + 8 + 9) * 6) * 9 * 5 * (5 * 7 + (2 + 3 + 2 * 7 + 5) * 5) * 3",
"7 * 3 * (7 * 5 + (2 * 7 + 9) + 6) + 3 * ((2 * 4) * 5 + 5 + 7 + (2 + 9 * 2 * 6 + 9 + 3))",
"7 * 9 * 6 + 2 * (5 + 2 * 7 + 7 * 3) * (2 * 5 + 3 * (5 * 8) + 8)",
"5 + (4 * 2 * (5 + 2 + 3 + 4 * 3) + (3 + 6 * 5 * 6) + 4) * 3",
"8 + (3 * 7 + (7 + 8 + 7) + 9) * 6 * 7 * (5 * 2 * 4 * 5)",
"(2 + (3 * 6 * 7) * 6) + 5 * 7 + 6",
"((5 + 7 * 3 * 9 + 3 + 8) * 5) * (2 + 5 + 7 + (9 * 3 * 8 + 4 * 2)) * (4 * 3 + 5 + 4) + 6 * 5 + 2",
"9 + 7 * ((3 + 6 * 2 * 4) * 6) * 9",
"3 + 8 * 3 + 3 * 3 * (7 + 4 + 3 + 4 + 9 + 7)",
"9 + 7 + (7 + (3 + 8 + 9)) + 8 * 4",
"(7 + 2 * 8 + 9) * 6 + 4 * (3 + (7 * 6 * 7 + 4) * 9 * 2)",
"(8 + 7 * 3 + 7 * 4 * 7) * 6",
"3 + 9 * ((4 + 5 * 8) + 5 * 3 * 2 * (6 * 6 * 6 + 3 + 7 * 3) * 7) * 9 * 6 * 2",
"4 * 7 * (9 + 2 * 5 * 3 * (7 * 9 + 8 * 2 * 7)) + 3 + (6 * 5 + (4 * 5) + 9 * 6 * 4)",
"7 + (7 * 7 * 7) + (9 * 9 + (9 + 3 + 8 * 3) * 2 * (7 + 7 * 8)) * 3",
"(8 * 2 + 9) * (9 * 2 + 5) + 7 * (2 * 2 * 9 + 9 + 7) * 2",

];

// Like always, we assume all input strings are syntaxically correct

function evaluateOperation(p_string) {
	return evaluateOperationAux(p_string, 0);
}

const PLUS = 1;
const TIMES = 2;

function evaluateOperationAux(p_string, p_iFirst) {
	var iChar = p_iFirst;
	var answer = null;
	var lastSign = null;
	var answerOpe;
	while (iChar != p_string.length && p_string[iChar] != ")") {
		switch (p_string[iChar]) {
			case ' ' :
				iChar++; 
			break;
			case '(' :
				answerOpe = evaluateOperationAux(p_string, iChar+1);
				answer = apply(answer, lastSign, answerOpe.value);
				iChar = answerOpe.finalIndex + 1;
			break;
			case '*' :
				lastSign = TIMES;
				iChar ++;
			break;
			case '+' :
				lastSign = PLUS;
				iChar ++;
			break;
			default : // Must be a number
				var value = 0;
				while ((p_string[iChar] >= '0') &&  (p_string[iChar] <= '9')) {
					value *= 10;
					value += charToASCIIRelativePosition(p_string[iChar], '0');
					iChar++;
				}
				answer = apply(answer, lastSign, value);
			break;
		}
	
	}
	return {value : answer, finalIndex : iChar};
}

function apply(p_value1, p_sign, p_value2) {
	if (p_sign == null) {
		return p_value2;
	} else if (p_sign == PLUS) {
		return p_value1 + p_value2;
	} else {
		return p_value1 * p_value2;
	}
}

function conclusion_18_1() {
	var answer = 0;
	for (var i = 0 ; i < rawData.length ; i++) {
		answer += (evaluateOperation(rawData[i])).value;
	}
	return answer; // Correct answer = 86311597203806
}

// ---

function evaluateOperation2(p_string) {
	return evaluateOperationAux2(p_string, 0);
}

function evaluateOperationAux2(p_string, p_iFirst) {
	var iChar = p_iFirst;
	var answer = null;
	var lastSign = null;
	var currentPlus = 0;
	var answerOpe;
	var list = [];
	while (iChar != p_string.length && p_string[iChar] != ")") {
		switch (p_string[iChar]) {
			case ' ' :
				iChar++; 
			break;
			case '(' :
				answerOpe = evaluateOperationAux2(p_string, iChar+1);
				list.push(answerOpe.value);
				iChar = answerOpe.finalIndex + 1;
			break;
			case '*' :
				list.push('*');
				iChar ++;
			break;
			case '+' :
				list.push('+');
				iChar ++;
			break;
			default : // Must be a number
				var value = 0;
				while ((p_string[iChar] >= '0') &&  (p_string[iChar] <= '9')) {
					value *= 10;
					value += charToASCIIRelativePosition(p_string[iChar], '0');
					iChar++;
				}
				list.push(value);
			break;
		}
	}
	var answer = 1;
	var i = 1;
	var currentTimes = list[0];
	while (i < list.length) {
		if (list[i] == '+') {
			currentTimes += list[i+1];
			i+=2;
		}
		if (list[i] == "*") {			
			answer *= currentTimes;
			currentTimes = list[i+1];
			i+=2;
		}
	}
	answer *= currentTimes;
	return {value : answer, finalIndex : iChar};
}

function conclusion_18_2() {
	var answer = 0;
	for (var i = 0 ; i < rawData.length ; i++) {
		answer += (evaluateOperation2(rawData[i])).value;
	}
	return answer; // Correct answer = 276894767062189
}