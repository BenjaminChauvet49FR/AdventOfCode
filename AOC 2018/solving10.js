const rawData = [
[ 50769, -40375,-5,  4],
[ 40697,  10253,-4, -1],
[-40315, -50495, 4,  5],
[-40296, -20123, 4,  2],
[ 50760, -50499,-5,  5],
[ 30569, -40366,-3,  4],
[ 10313,  30502,-1, -3],
[-50447, -10003, 5,  1],
[-20073,  20369, 2, -2],
[-40340,  30499, 4, -3],
[ 40673,  10253,-4, -1],
[-50455, -50492, 5,  5],
[-50472, -10001, 5,  1],
[ 10280,  30501,-1, -3],
[ -9975,  -9994, 1,  1],
[ 10267, -30247,-1,  3],
[-30171,  20374, 3, -2],
[ 40692,  30497,-4, -3],
[ 50776, -40374,-5,  4],
[ 10269,  20378,-1, -2],
[ -9950,  50741, 1, -5],
[ 30531, -40366,-3,  4],
[ 30571, -50490,-3,  5],
[ 40647, -40375,-4,  4],
[ 30539, -30247,-3,  3],
[ 30568, -30246,-3,  3],
[-20092,  20374, 2, -2],
[ -9976,  -9999, 1,  1],
[ 10320,  20377,-1, -2],
[ 30547,  10254,-3, -1],
[ 40676,  40623,-4, -4],
[ 50769,  40621,-5, -4],
[-30188, -40371, 3,  4],
[ 30565, -20125,-3,  2],
[-40329, -20123, 4,  2],
[-20079,  30501, 2, -3],
[ 50788,  30495,-5, -3],
[-20075,  10254, 2, -1],
[ 20408,  20378,-2, -2],
[-20052,  30496, 2, -3],
[-40344,  40617, 4, -4],
[ 10280,  50744,-1, -5],
[ 40640,  -9996,-4,  1],
[ -9974,  50750, 1, -5],
[-20095, -30242, 2,  3],
[ 20438,  30493,-2, -3],
[ 50796,  10249,-5, -1],
[ -9928,  40620, 1, -4],
[ -9956,  10251, 1, -1],
[ -9968,  30499, 1, -3],
[ 50765,  50749,-5, -5],
[ -9947, -40369, 1,  4],
[ 40676,  20378,-4, -2],
[-30211, -20126, 3,  2],
[-50456,  -9994, 5,  1],
[-20092, -30249, 2,  3],
[ 10304, -30247,-1,  3],
[ 50776,  50748,-5, -5],
[-40295,  10252, 4, -1],
[ -9952, -20119, 1,  2],
[ 50797,  40623,-5, -4],
[-40300,  20377, 4, -2],
[ 10296,  30493,-1, -3],
[ 50821,  30495,-5, -3],
[-40355,  30499, 4, -3],
[-20100,  -9999, 2,  1],
[ 50770,  50750,-5, -5],
[-40311,  50744, 4, -5],
[-30204,  10248, 3, -1],
[-50421, -50499, 5,  5],
[ 30552, -10003,-3,  1],
[ 30533, -40367,-3,  4],
[ 30549,  40618,-3, -4],
[ 50802,  50741,-5, -5],
[ 50784,  30494,-5, -3],
[ 40696, -20123,-4,  2],
[-30205,  30497, 3, -3],
[ 10324,  40621,-1, -4],
[ -9940,  40621, 1, -4],
[-30179, -50499, 3,  5],
[ 20421, -40371,-2,  4],
[ 50760,  20378,-5, -2],
[ 30538,  50746,-3, -5],
[ -9959, -20120, 1,  2],
[ -9944, -50497, 1,  5],
[ 20420,  40622,-2, -4],
[-40305, -30242, 4,  3],
[ 20390,  30497,-2, -3],
[-50428, -40372, 5,  4],
[-50467,  -9994, 5,  1],
[-20071, -50494, 2,  5],
[ -9965,  -9994, 1,  1],
[ 40692, -40374,-4,  4],
[ -9952, -20124, 1,  2],
[ 20396, -10000,-2,  1],
[ 20404,  10250,-2, -1],
[ 10301, -50492,-1,  5],
[ -9968,  -9995, 1,  1],
[ 20436,  30501,-2, -3],
[-20084,  40618, 2, -4],
[ 20428, -20125,-2,  2],
[ -9958,  50745, 1, -5],
[ 40660,  40618,-4, -4],
[ 30522, -40375,-3,  4],
[-40319, -40372, 4,  4],
[ 40697,  40624,-4, -4],
[-40295, -30248, 4,  3],
[-40344, -30247, 4,  3],
[ 30536,  10254,-3, -1],
[ -9952,  10249, 1, -1],
[ -9923,  50747, 1, -5],
[ 40641,  10253,-4, -1],
[-50452, -50492, 5,  5],
[-40316,  20373, 4, -2],
[ 10296, -50493,-1,  5],
[ 10313,  40623,-1, -4],
[ 50785,  50747,-5, -5],
[ 20406, -20118,-2,  2],
[-40313, -20123, 4,  2],
[ 50771, -20123,-5,  2],
[-20097, -10003, 2,  1],
[ 50792,  30500,-5, -3],
[ -9949,  -9999, 1,  1],
[ -9976,  40619, 1, -4],
[-30195,  50749, 3, -5],
[-50464, -30246, 5,  3],
[ 30544, -30243,-3,  3],
[ 50792, -40366,-5,  4],
[-20083, -10000, 2,  1],
[ 50810,  50746,-5, -5],
[-30180, -20118, 3,  2],
[ 20424, -50495,-2,  5],
[ 20422,  50741,-2, -5],
[-40304,  40617, 4, -4],
[-30192, -40372, 3,  4],
[ -9947,  10246, 1, -1],
[-50464,  -9999, 5,  1],
[-40328,  10248, 4, -1],
[ 50795,  -9994,-5,  1],
[-20107,  40624, 2, -4],
[-50451, -40375, 5,  4],
[-40322, -20118, 4,  2],
[ 40653,  10245,-4, -1],
[ 20412,  30502,-2, -3],
[ -9936, -30251, 1,  3],
[ 40665,  20370,-4, -2],
[ 10268, -40369,-1,  4],
[ -9973, -30251, 1,  3],
[ 50813, -40366,-5,  4],
[ 50763, -40370,-5,  4],
[ 10298, -40366,-1,  4],
[-20087, -20119, 2,  2],
[ 10317, -30249,-1,  3],
[ 30520, -30242,-3,  3],
[-20057, -20123, 2,  2],
[ 10323,  20369,-1, -2],
[-50430,  50750, 5, -5],
[ 10324,  40617,-1, -4],
[-50451, -40374, 5,  4],
[-20049, -30247, 2,  3],
[-40295,  10250, 4, -1],
[-40348, -50499, 4,  5],
[ 50818, -30242,-5,  3],
[ 50795, -10003,-5,  1],
[ -9955,  50742, 1, -5],
[ 10300,  50750,-1, -5],
[-40324,  40623, 4, -4],
[-40297, -50495, 4,  5],
[ 50816,  10251,-5, -1],
[-30207, -20125, 3,  2],
[-50472,  50741, 5, -5],
[-30213,  10254, 3, -1],
[-50460, -50499, 5,  5],
[-20103,  20369, 2, -2],
[ -9966,  10254, 1, -1],
[ 50808, -50492,-5,  5],
[-30219, -20127, 3,  2],
[-40307, -20121, 4,  2],
[ -9951,  40626, 1, -4],
[ 40637,  40619,-4, -4],
[ 30537,  40620,-3, -4],
[-50432,  50749, 5, -5],
[ 30561, -50490,-3,  5],
[ 50818,  10245,-5, -1],
[ 10317, -40373,-1,  4],
[-30223,  10245, 3, -1],
[ 30541, -30242,-3,  3],
[ -9935, -30242, 1,  3],
[ -9952, -40373, 1,  4],
[-30172,  20369, 3, -2],
[-40300,  50748, 4, -5],
[-50468, -50495, 5,  5],
[-50445,  10254, 5, -1],
[-40348, -20122, 4,  2],
[ 10309,  20371,-1, -2],
[ 50793, -30242,-5,  3],
[ -9983,  30499, 1, -3],
[ 30544, -50492,-3,  5],
[ 20404,  20376,-2, -2],
[ -9976,  30500, 1, -3],
[ 40676,  10254,-4, -1],
[ 40693,  -9999,-4,  1],
[-50420,  40626, 5, -4],
[-50444,  20373, 5, -2],
[ -9935, -10003, 1,  1],
[-20065,  50741, 2, -5],
[-40356,  30502, 4, -3],
[-20105,  20373, 2, -2],
[ 20440,  10248,-2, -1],
[-20104, -40369, 2,  4],
[-30200,  40620, 3, -4],
[ 40660,  20369,-4, -2],
[ 50800,  30500,-5, -3],
[-50468, -50490, 5,  5],
[ 40676,  -9998,-4,  1],
[-30176, -50493, 3,  5],
[ 40692,  40626,-4, -4],
[-30228,  50743, 3, -5],
[ 30560,  -9996,-3,  1],
[ 30546,  30497,-3, -3],
[-30200,  20370, 3, -2],
[ 30544,  -9999,-3,  1],
[-20066,  40621, 2, -4],
[-50472,  50749, 5, -5],
[-50440,  50750, 5, -5],
[-30200, -50490, 3,  5],
[ -9939, -50497, 1,  5],
[ 20425, -20122,-2,  2],
[ -9979,  30494, 1, -3],
[-30222,  30497, 3, -3],
[ 30521,  20378,-3, -2],
[-40314,  40617, 4, -4],
[ -9959, -50497, 1,  5],
[ 20398,  40617,-2, -4],
[ 50821, -10001,-5,  1],
[ 50811,  -9994,-5,  1],
[-50469,  10249, 5, -1],
[-40307,  30499, 4, -3],
[-20107,  -9996, 2,  1],
[ -9968, -50492, 1,  5],
[ 40653,  30493,-4, -3],
[-40316, -50491, 4,  5],
[ -9926,  20373, 1, -2],
[ -9949, -30247, 1,  3],
[ 40668, -30242,-4,  3],
[-40295, -40368, 4,  4],
[-20066, -40371, 2,  4],
[-20084, -40367, 2,  4],
[-20068,  10245, 2, -1],
[ 20391,  30498,-2, -3],
[ 10298, -20118,-1,  2],
[-50428, -40372, 5,  4],
[ 50780,  40626,-5, -4],
[ 40688, -40366,-4,  4],
[ 10304,  30495,-1, -3],
[ -9956,  40620, 1, -4],
[-40298,  30497, 4, -3],
[-40300,  20377, 4, -2],
[ 10301, -10001,-1,  1],
[ 10304,  10250,-1, -1],
[-20052, -40369, 2,  4],
[ 20436,  40617,-2, -4],
[-30191,  20373, 3, -2],
[ 50810, -30251,-5,  3],
[ 40664, -20125,-4,  2],
[ 20400, -30251,-2,  3],
[-50443,  -9997, 5,  1],
[ 40668,  50743,-4, -5],
[-50419, -50496, 5,  5],
[ 50785, -40368,-5,  4],
[-30184,  50750, 3, -5],
[ -9931, -40374, 1,  4],
[-50461, -10003, 5,  1],
[ 30562, -40366,-3,  4],
[ 30571,  10245,-3, -1],
[ 20389, -30248,-2,  3],
[-40316,  50747, 4, -5],
[-20064,  40617, 2, -4],
[ -9979,  40626, 1, -4],
[-40345, -20118, 4,  2],
[ 10264, -50491,-1,  5],
[ 20420,  50746,-2, -5],
[-50444, -10003, 5,  1],
[ 30544, -50495,-3,  5],
[ -9939,  10246, 1, -1],
[-20081,  -9998, 2,  1],
[ 20404,  -9999,-2,  1],
[ 10267, -30247,-1,  3],
[ 20444, -50497,-2,  5],
[ -9952,  10250, 1, -1],
[ 10317, -50498,-1,  5],
[-20068,  10253, 2, -1],
[ 30544, -30249,-3,  3],
[ -9976, -10002, 1,  1],
[ -9926,  50750, 1, -5],
[-20107, -20125, 2,  2],
[ 50772,  20378,-5, -2],
[ -9976,  40620, 1, -4],
[-40338, -20127, 4,  2],
[-20099,  -9999, 2,  1],
[ 40673,  30501,-4, -3],
[ -9984, -30250, 1,  3],
[ 40640, -20124,-4,  2],
[ 10280, -40373,-1,  4],
[ 20417, -20127,-2,  2],
[-20052,  10250, 2, -1],
[ 10312, -50499,-1,  5],
[ -9963, -20119, 1,  2],
[ 30573,  40623,-3, -4],
[ 10277, -20118,-1,  2],
[ 50778, -50499,-5,  5],
[ 10301,  10247,-1, -1],
[ 50764, -50492,-5,  5],
[ 30520,  50742,-3, -5],
[-40312,  -9999, 4,  1],
[-50419,  40620, 5, -4],
[ 10321, -20123,-1,  2],
[-40295,  10246, 4, -1],
[-20060, -20119, 2,  2],
[-50439, -10003, 5,  1],
[-40351, -30250, 4,  3],
[ -9942,  50745, 1, -5],
[ 10304, -40374,-1,  4],
[-50440,  10248, 5, -1],
[ 20433, -30249,-2,  3],
[-40299, -20127, 4,  2],
[ 20432, -20127,-2,  2],
[ 10290,  -9998,-1,  1],
[-30200,  20377, 3, -2],
[ 20400, -40375,-2,  4],
[ 30516,  10251,-3, -1],
[ 30517,  20378,-3, -2],
[ 20438,  -9998,-2,  1],
[ 40686, -50490,-4,  5],
[ 40638, -50494,-4,  5],
[-50448,  -9996, 5,  1],
[-40305,  40617, 4, -4],
[-40340,  30499, 4, -3],
[-50456, -50499, 5,  5],
[ -9965, -20127, 1,  2],
[-30176,  40617, 3, -4],
[ -9947,  30496, 1, -3],
[-50430,  -9998, 5,  1],
[ 30529,  50750,-3, -5],
[ 50812, -20127,-5,  2],
[ 10317,  10254,-1, -1],
[ 40644,  30499,-4, -3],
[-20067,  40617, 2, -4],
[-40351, -50491, 4,  5],
[ 50816, -30242,-5,  3],
[ 20445, -20118,-2,  2],
[ 20414, -30246,-2,  3],
[ 20439, -10003,-2,  1],
[-50472,  50747, 5, -5],
[-20108, -30242, 2,  3],
[-30195,  10248, 3, -1],
[-30175,  10254, 3, -1]
];

var dynamicData = null;

function init() {
	dynamicData = [];
	rawData.forEach(ar => {
		dynamicData.push(ar.slice());
	});
}

function moveForward() {
	dynamicData.forEach(array => {
		array[0] += array[2];
		array[1] += array[3];
	});
}

function moveForwardTimes(p_times) {
	dynamicData.forEach(array => {
		array[0] += array[2]*p_times;
		array[1] += array[3]*p_times;
	});
}

function conclusion_10_aux(p_startStep, p_upTo) {
	init();
	moveForwardTimes(p_startStep);
	for (var i = p_startStep ; i <= p_upTo ; i++) {
		moveForward();
		minX = dynamicData[0][0];
		maxX = dynamicData[0][0];
		minY = dynamicData[0][1];
		maxY = dynamicData[0][1];
		dynamicData.forEach(array => {
			minX = Math.min(minX, array[0]);
			maxX = Math.max(maxX, array[0]);
			minY = Math.min(minY, array[1]);
			maxY = Math.max(maxY, array[1]);
		});
		// maxX-minX+1 = actual number of spaces taken, but you got the point
		console.log("After " + (i+1) + " moves : min/max X " + minX + "," + maxX + " ; min/max Y " + minY + "," + maxY + " (w/h : " + (maxX-minX) + " " + (maxY-minY) + ")");
	}
}

// Testing different numbers of steps, it seems that the required number of ones to have a message of minimal possible height AND minimal possible width was 10124. Width was decreasing before and increasing after, same for height.

function conclusion_10_1() {
	const winningStep = 10124;
	init();
	moveForwardTimes(winningStep);
	minX = dynamicData[0][0];
	maxX = dynamicData[0][0];
	minY = dynamicData[0][1];
	maxY = dynamicData[0][1];
	dynamicData.forEach(array => {
		minX = Math.min(minX, array[0]);
		maxX = Math.max(maxX, array[0]);
		minY = Math.min(minY, array[1]);
		maxY = Math.max(maxY, array[1]);
	});
	const arrayPoints = generateDoubleEntryArray(maxX-minX+1, maxY-minY+1, false);
	dynamicData.forEach(array => {
		arrayPoints[array[1]-minY][array[0]-minX] = true;
	});
	arrayPoints.forEach(linePoints => {
		var string = "";
		linePoints.forEach(str => {
			string += (str ? '#' : '.');
		});
		console.log(string);
	});
}