clé triviale : clé qui :
-est dans une impasse
-est plus rapide à prendre quand on part d'un embranchement, considère le trajet embranchement-cette clé-embranchement-autre clé que embranchement-autre clé-embranchement-cette clé, indépendemment de si on a besoin ou non de l'autre clé
-ne nécessite pas de déverouiller une autre porte (on peut donc la prendre dès qu'on passe devant l'embranchement correspondant)
-ne sert pas à déverouiller une autre porte (on peut donc la prendre la dernière fois qu'on passe devant l'embranchement correspondant)
Clé t : triviale (ajouter 24)
Clé k : semi-triviale (on peut pas la prendre au 1er passage... mais !)
Clé q : trivile si on a pris J avant
Clé v : inutile (derrière la clé d depuis le centre ; les portes D et V donnant accès aux mêmes endroits)
Clé u : inutile (derrière la clé f ; les portes F et U sont ensemble
Clé w ou x : l'une d'elles est triviale

Analyser le cas des clés b et h

Clés e,n,s : inutiles

Algorithme "glouton" : si on peut prendre TOUTES les clés à un noeud donné et repartir, il suffit de prendre la somme des poids de ce noeud

Portes : A

___


En fait, dès qu'on arrive à un noeud, il faut examiner les chemins les plus profonds :
-si un chemin ne contient que des clés accessibles ET non-finales, les prendre toutes (la distance se calcule simplement) immédiatement
-si un chemin contient au moins une clé non-accessible OU la clé finale : laisser ce chemin pour plus tard. 

Au fait, quelle clé (des 4 quadrants) peut être "finale" ? Voyons voir...
la k, la o, la q, la t (peu de sens pour elle), la w, la x

Et dans mon propre labyrinthe : 
m*, o*, t, u, w, y
Permettez-moi d'en douter pour ces 2 là !

==============

Ordre des portes et clés (sans les clés inutiles) :
NO 
(gj)|(LPrDVu(f|aYmbHo))
NE
(zidvUFA(y|Mc))
SE
(t)|(Il(p)|(G(w|x)))
SO
(Zk)|((RCBh)|(Jq))

Simplifications possibles : 
-d est inutile (d et v obtenues consécutivement et D et V portes ensemble)
-g et j sont équivalentes (on ne va pas prendre g sans j quand même !)
-r est inutile (R et B ensemble, r sur le chemin de b)
-u est inutile (U et F ensemble, u sur le chemin de f)
-f et a sont équivalentes (accessible de la même maniere, leurs portes sont ensemble) : faire disparaître f et F
-l est inutile (L et P ensemble, l sur le chemin de p

Simplifications (fait apparaître un J doublé) :
NO 
(j)|(PVaYmbHo)
NE
(zivA(y|Mc))
SE
(t)|(I(p)|(J(w|x)))
SO
(Zk)|((CBh)|(Jq))

-m,b : clé b nécessaire pour clé h, inutile de s'arrêter.
-z,i,v : clé v nécessaire pour clé a, inutile de s'arrêter.

Première chaîne de clés : zivpaymbcho
Mieux : zivtpafymbcho
(clés inutiles : delnrsu)
Restent 6 clés : gj, q, w, x, k, 
w et x : les prendre ensemble, la plus courte d'abord (j'ai pas compté mais ça doit être x)
gj : à prendre avant ou après p ?
k avant q c'est sûr (éloignement)
Donc 3 triplets : kq, gj, xw

Chaîne auto-complétée avec les clés inutiles  :
zidvtlpruafymbcheno (s à rajouter à k)

q avant h c'est sûr (on doit déjà avoir pris j)

zidvtlpruafymbcskqheno

Donc :
gjzidvtlpxwruafymbcskqheno
OU :
zidvtlprugjafymbcskqhenoxw




______________

Analyse qq temps plus tard :
jLPrDVufaYmbHo
zidvUFAyMc
(Zk|Jq|ROBh) => hypothèse car les branches Zk et Jq sont très courtes : ZJROBh (+ aller-retour k / q)
IlpGw

Simplification : 
jPrVaYmbHo
zivAyMc
IpJw
ZJRCBh

Re-simplification :
jPVaYmbHo
zivAyMc
IpJw
CBh