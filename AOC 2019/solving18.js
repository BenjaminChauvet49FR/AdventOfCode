var rawData = [
"#################################################################################",
"#.............#.....#.................#.#.....#...#.......#...................#a#",
"#.#####.#######.#.###.#########.#####.#.#.###Y###.#.#####.#.#####.###########.#.#",
"#.#...#.#.....#.#..c#.........#...#.#...#...#.#...#.#.#...#.#.#...#...#...#.....#",
"#.#.###.#.###.#.###.#.###########.#.###.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#######",
"#.#...#...#.#...#.#...#...........#.#...#.#.#...#.#.#.#.#.#.#.#...#.#.#.#.#.....#",
"#.#.#.#####.#####.#####.###.#######.#.###.#.#######.#.#.###.#.###.#.#.#.#.#.###.#",
"#.#.#.............#.#...#.#.#..e..#.....#.#...........#...#.#...#...#...#.....#.#",
"#.#########.#####.#.#.###.#.#.###.#####.#.###############.#T#.#.###############.#",
"#...#..k....#.....#.#.Z.#...#...#.....#.#.........#.#.....#.#.#.....#.L.....#...#",
"###.#.#.#######.###.###.#######.#####.#.#########.#.#.###.#.#.###.#.###.###.#.###",
"#...#.#.#.....#.#...#...#.....#.....#.#.#...#...#.#.#.#...#.#.#...#...#.#...#...#",
"#.###.#.#.###.#.#.###.###.###.#####.#.#.#.#.#.#.#.#.#.###.#.###.#####.#.#.#####.#",
"#.#...#.#.#...#.#...#.....#.#.....#.#.#.#.#...#...#.#...#.#.#...#.#...#.#.#.....#",
"#.###.#.#.#.###.###.#######.#.#####.#.#.#.#########.###.###.#.###.#.###.#.#.###.#",
"#...#.#.#.#...#...#.........#.#.....#.#.#.............#.......#...#.#...#.#...#.#",
"###.#.###.###.###.###.#.#####.#.#####.###############.#########.#.#.###.#.###.#.#",
"#.....#...#...#.J...#.#.#.....#.....#...#...........#.#...#...#.#.......#...#.#.#",
"#######.###.#######.#.###.#####.#######.#########.#.#.###.#.#.#########.#####.#.#",
"#.......#.#...#...#...#...#...#.#.......#.....O.#.#.#.#...#.#.......#...#.....#s#",
"#.#######.###.#.#.#####.###.#.#.#.#######.#####.#.#.#.#.###.#####.#.#.###.#####.#",
"#...#...#...#...#...#.#.#...#...#.......#.....#.#.#.#.#...#.#...#.#.#...#...#...#",
"###.#.#.#.#########.#.#.#.#######.#####.#.#####.#.###.###.#.###.###.#.#####.#.###",
"#.#...#.#.........#...#...#....d#.....#.#.#.....#.#...#...#.#.#...#.#.#.....#.#.#",
"#.#####.#######.#######.###.###.#####.#.#.#.#####.#.###.#.#.#.###.#.#.#.#####.#.#",
"#...#.#.......#.......#...#.#...#.....#.#.#.....#.......#.#.....#.#.#.#.#.......#",
"#.#.#.#######.#.#.#####.###.#.#####.###.#.#####.#############.###.#.#.#.#######.#",
"#.#...#.....#.#.#...#...#...#.....#...#.#.#...#.#...........#.#...#.#.#.#...#.#.#",
"#.###.###.#.#.#.###.#.###.#######.#####.#.###.#.#.#########.#.#.###.#.#.#.#.#.#.#",
"#...#.....#.#.#...#...#...#.......#.....#...#.#.#.....#...#...#...#.#.#...#.#...#",
"#.#.#######.#.###.#####.###.#######.#######.#.#.#####.###.#######.#.#####.#.#.###",
"#.#.#.....#.#.#.#.#.#...#.#.#...#...#...#...#.#.....#...#.....#...#.....#.#.#w#.#",
"#.#.#.###.#.#.#.#.#.#.###.#.#.#.###.#.#.#.###.#.###.###.#.###.#.###.###.###.#.#.#",
"#.#.#.#.#.#.#.#.#.#.#.#m..#...#...#...#.#.#...#...#...#.#...#.#.#.....#.#...#.#.#",
"###.#.#.#.###W#.#.#.#.#.#########.#####.#.#.#.###.#####.###.#.#.#######.#.###.#.#",
"#...#...#.#...#.....#.#.......#...#...#.#.#.#.#.#.....#.....#.#.........#.#.#...#",
"#.###.###.#.###.#####.#.###.###.###.#.#.#.#.#.#.#####.#######.###########.#.###.#",
"#.#...#...#.#...#.S...#...#.....#...#.#.#...#.....#.#.........#...#...#...#.....#",
"#.#.###.###.#####.#######.#######.###.#.#########.#.###########.#.#.#.#.###.#####",
"#.....#...........#.......F.......#..................f..........#...#...#.......#",
"#######################################.@.#######################################",
"#.....#.#...........#.....#.........................#...#.....#.M.......#.....#.#",
"###P#.#.#.#######.###.###.#.#######.###.#.#########.#.#.#.###.###.#####.###.#.#.#",
"#...#...#...#.#...#.....#.#.#.......#...#...#.........#...#.......#...#.....#.#.#",
"#.#.#######.#.#.###.#####.#.#.#######.#####.###############.#########.#######.#.#",
"#.#.#.....#.#.#.#...#...#.#.#.#.........#...#.......#...#.....#.....#.#.......#.#",
"#.###.###.#.#.#.#.###.#.#.#.#.###########.###.#####.#.#.#######.###.#.#.#######.#",
"#...#.#.#.#...#.#.#...#...#.#...........#...#...#.#...#.......#.#.#.#.#.........#",
"#.#.#.#.#.#.###.#.#.#####.#######.#####.###.###.#.###########.#.#.#.#.#.#######.#",
"#.#.#...#...#...#.#r#.....#.....#.....#.#...#.#.#.......#...#.....#.#...#.....#.#",
"#.#.###.#####.###.#.#######.###.#####.#.#.#.#.#.###.#####.#.#######.#.###.###.#.#",
"#.#...#.#...#...#.#.........#...#...#.#.#.#...#...#.#.....#.#......p#...#.#.#.#.#",
"###.#.#.#.#.###.#.###########.###.#.#.#.#.###.###.#.#.#####.#.###.#######.#.#.###",
"#...#.#.#.#...#.......#.....#.#...#...#.#...#.#...#.....#...#.#...#.K...#.#.#...#",
"#.#####.#.###.#######.#.###Q#.#.#######.###.#.#.#####.###.###.#.###.###.#.#.###.#",
"#.....#...#...#.#...#.#.#.#...#...#.....#...#.#.....#.#...#...#.#...#.#..j#.#...#",
"#.###.#####.###.#.#.###.#.#########.###.#.#########.###.#.#.###.#.###.#####.#.###",
"#...#.#.....#...#.#.B...#...#...#...#...#.#.......#.....#.#...#.#...........#.R.#",
"#.###.#.#######.#.#######.#.#.#.#.###.###.#.#.###.#######.###.###.#############.#",
"#.#...#.......#.#n....#...#.#.#...#...#.#...#...#.....#...#.#.....#..u..#.....#.#",
"###.#.#######.#.#####.#.###.#.#####.###.#.#####.###.###.###.###.###.###.#.###.#.#",
"#...#.#...#...#.....#.#.#...#...#.#...#.#...#...#...#...#...#.#.#...#...#.#...#.#",
"#.#####.#.#.###.#.#####.#.###.#.#.###.#.#####.#######.#####.#.###.###.###.###.#.#",
"#...#...#.#.#...#.......#.#...#.#...#...#.....#.......#.....#.U...#.#...#...#...#",
"#.#.#.###.#.#.#########.#.#####.###.###.#.#.###.#######.###########.###X#.#.###.#",
"#.#..l#...#.#...#.......#.....#...#...#.#.#o#...#.#.....#...#......x....#.#.#...#",
"#.#####C###.#.###.###########.###.#.###.#.###.###.#.###.#.#.#I#############.#.###",
"#.....#...#.#.#...#...#.....#.#...#.#...#.#...#.....#...#.#...#v......G.#...#..q#",
"###.#####.#.###.###.#.#.###.#.#.###.#.###.#.###.#####.#.#.#####.#######.#.#####.#",
"#.#y#...#.#...#.#...#.#...#.#...#...#...#.#.#...#.....#.#..i..#...#.....#...#...#",
"#.#.#.#.#.###.#.#.###.#.#.#.#####.#.###.#.#.###.#.###########H#.#.#.#####.#.#.###",
"#...#.#.#...#.#.....#.#.#.#.#...#.#.....#.#...#.#...........#.#.#.#g..#...#.#...#",
"#.###.#.###A#.#######.#.#.#.#.###.#######.###.#.#########.#.#.#.#.###.#####.###.#",
"#.#...#.....#.........#.#.#.#.#...#.....#...#.#.......#...#.#.#.#.#.#.#...#...#.#",
"###.#####################.#.#.#.#####.###.#.#.#########.###.#.###.#.#.#.#.###.#.#",
"#...#.......#.............#..t#.#...#...#.#.#.#.......#.#...#...#.#.#.N.#.....#.#",
"#.###.#####.#.#########.#######.#.#D#.#.#.#.#.#.#####.#.#.#####.#.#.###########.#",
"#.#...#...#..z#.#.......#.....#...#.#.#.#.#.#...#...#...#.#.#..h#.#.....#......b#",
"#.#.###.#.#####.#.#######.###.#####.###.#.#.#####.#.#####.#.#.###.#.###.#.#######",
"#.......#.......#...........#...........#.#.....E.#.........#...V.#...#.........#",
"#################################################################################"
];
const X_LENGTH = rawData[0].length;
const Y_LENGTH = rawData.length;

const field = stringArray_to_charDoubleEntryArray(rawData);
var gData = {
	keys : [],
	nodesSect : [],
	checkerPaths : new CheckCollectionDoubleEntry(X_LENGTH, Y_LENGTH)
};
const distancesBetweenKeys = generateDoubleEntryArray(X_LENGTH, Y_LENGTH, 0);

const X_SPLIT_LEFT = 39;
const X_SPLIT_RIGHT = 41;
const Y_SPLIT_UP = 39;
const Y_SPLIT_DOWN = 41;
const WALL = '#';
const ADDED_WALL = '+';
const EMPTY = '.';
const NOPE = -1;
const SECTION_MARK = '1';
const LEFT_UP_1 = 1;
const LEFT_UP_2 = 2;
const RIGHT_UP_1 = 3;
const RIGHT_UP_2 = 4;
const LEFT_DOWN_1 = 5;
const LEFT_DOWN_2 = 6;
const RIGHT_DOWN_1 = 7;
const RIGHT_DOWN_2 = 8;

function doorValue(p_x, p_y) {
	const c = charToASCIIRelativePosition(field[p_y][p_x], 'A');
	return ((c <= 25) && (c >= 0)) ? c : NOPE;
}

function keyValue(p_x, p_y) {
	const c = charToASCIIRelativePosition(field[p_y][p_x], 'a');
	return ((c <= 25) && (c >= 0)) ? c : NOPE;	
}

function isSolid(p_x, p_y) {
	return field[p_y][p_x] == WALL || field[p_y][p_x] == ADDED_WALL;
}

// No "." on the edges, so no need to check neighbors;
function addWallsIfNeeded(p_x, p_y) {
	if (keyValue(p_x, p_y) != NOPE) {
		return;
	}
	const wallUp = isSolid(p_x, p_y-1);
	const wallDown = isSolid(p_x, p_y+1);
	const wallLeft = isSolid(p_x-1, p_y);
	const wallRight = isSolid(p_x+1, p_y);
	if (wallUp && wallDown) {
		if (wallRight) {
			field[p_y][p_x] = ADDED_WALL;
			addWallsIfNeeded(p_x-1, p_y);
		} else if (wallLeft) {
			field[p_y][p_x] = ADDED_WALL;
			addWallsIfNeeded(p_x+1, p_y);			
		}
	}
	if (wallLeft && wallRight) {
		if (wallUp) {
			field[p_y][p_x] = ADDED_WALL;
			addWallsIfNeeded(p_x, p_y+1);			
		} else if (wallDown) {
			field[p_y][p_x] = ADDED_WALL;
			addWallsIfNeeded(p_x, p_y-1);
		}
	}

}


function initKeys() {
	field[Y_SPLIT_UP][X_SPLIT_LEFT] = SECTION_MARK;
	field[Y_SPLIT_UP][X_SPLIT_RIGHT] = SECTION_MARK;
	field[Y_SPLIT_DOWN][X_SPLIT_LEFT] = SECTION_MARK;
	field[Y_SPLIT_DOWN][X_SPLIT_RIGHT] = SECTION_MARK;
	for (var i = 0 ; i < 26 ; i++) {
		// There are keys from a to z, right ?
		gData.keys.push({
			id : i,
			required : [],
			x : -1,
			y : -1,
			distFSM : -1, // FSM = from start marker
			section : -1
		});
	}
	var x, y;
	// Remove all dead ends + find all keys
	for (y = 0 ; y < Y_LENGTH ; y++) {
		for (x = 0 ; x < X_LENGTH ; x++) {
			if (field[y][x] == EMPTY || doorValue(x, y) != NOPE) {
				addWallsIfNeeded(x, y);
			}
			if (keyValue(x, y) != NOPE) {
				gData.keys[keyValue(x, y)].y = y;
				gData.keys[keyValue(x, y)].x = x;
			}
		}
	}
	
	// Look for the required keys for each key + give each key a quadrant and a distance from the center
	makeSearches(X_SPLIT_LEFT-1, Y_SPLIT_UP, LEFT_UP_1);
	makeSearches(X_SPLIT_LEFT, Y_SPLIT_UP-1, LEFT_UP_2);
	makeSearches(X_SPLIT_LEFT-1, Y_SPLIT_DOWN, LEFT_DOWN_1);
	makeSearches(X_SPLIT_LEFT, Y_SPLIT_DOWN+1, LEFT_DOWN_2);
	makeSearches(X_SPLIT_RIGHT+1, Y_SPLIT_UP, RIGHT_UP_1);
	makeSearches(X_SPLIT_RIGHT, Y_SPLIT_UP-1, RIGHT_UP_2);
	makeSearches(X_SPLIT_RIGHT+1, Y_SPLIT_DOWN, RIGHT_DOWN_1);
	makeSearches(X_SPLIT_RIGHT, Y_SPLIT_DOWN+1, RIGHT_DOWN_2);	
}

function makeSearches(p_xStart, p_yStart, p_section) {
	if (isSolid(p_xStart, p_yStart)) {
		return;
	}
	gData.checkerPaths.clean();
	gData.checkerPaths.add(X_SPLIT_LEFT, Y_SPLIT_UP);
	gData.checkerPaths.add(X_SPLIT_RIGHT, Y_SPLIT_UP);
	gData.checkerPaths.add(X_SPLIT_LEFT, Y_SPLIT_DOWN);
	gData.checkerPaths.add(X_SPLIT_RIGHT, Y_SPLIT_DOWN);
	makeSearchesAux(p_xStart, p_yStart, p_section, 1, [], null);
	// Make the distances thanks to the nodes system.
	//...
}

function makeSearchesAux(p_x, p_y, p_section, p_dist, p_reqdList, p_closestNodeId) {
	if (isSolid(p_x, p_y) || gData.checkerPaths.get(p_x, p_y)) {
		return;
	}
	gData.checkerPaths.add(p_x, p_y);
	const c = keyValue(p_x, p_y);
	var node = p_closestNodeId;
	if (c != NOPE) {
		gData.keys[c].required = p_reqdList.slice();
		gData.keys[c].distFSM = p_dist;
		gData.keys[c].section = p_section;
		p_reqdList.push(c);
		node = gData.nodesSect.length;
		gData.nodesSect.push({
			father : p_closestNodeId,
			distFSM : p_dist
		});
	}
	const c2 = doorValue(p_x, p_y);
	if (c2 != NOPE) {
		p_reqdList.push(c2);		
	}
	makeSearchesAux(p_x-1, p_y, p_section, p_dist+1, p_reqdList.slice(), node);
	makeSearchesAux(p_x+1, p_y, p_section, p_dist+1, p_reqdList.slice(), node);
	makeSearchesAux(p_x, p_y-1, p_section, p_dist+1, p_reqdList.slice(), node);
	makeSearchesAux(p_x, p_y+1, p_section, p_dist+1, p_reqdList.slice(), node);
	
	// Now, distances between keys within a section :
	// Any key or junction must be a node.
	// We must remember for each node its father (eg the first node that comes to it)
	// Distance between two nodes = sum of the differences of distFSMs between the nodes and their common ancestor (if one node is the ancestor of the other, simply the difference of distFSMs.
}