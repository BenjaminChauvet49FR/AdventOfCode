	set i 31 
	set a 1
	mul p 17
	jgz p p
		mul a 2
		add i -1
		jgz i -2 // a = 2**(i at first if i > 0) // a = 2**31 	
	add a -1
	set i 127
	set p 680
		mul p 8505
		mod p a
		mul p 129749
		add p 12345
		mod p a // p = 680 ; p*=8505 ; p %= (2**31-1) ; p *= 129749 ; p += 12345 ; p %= (2**31-1) 
		set b p
		mod b 10000
		snd b // First sound played !
		add i -1
		jgz i -9 // Do this (i) times
jgz a 3
rcv b
jgz b -1
set f 0
set i 126
rcv a
rcv b
set p a 
mul p -1
add p b // p = -2**31+1 ; p += b ; sound b if p > 0, sound a else
jgz p 4
snd a
set a b
jgz 1 3
snd b
set f 1
add i -1
jgz i -11
snd a
jgz f -16
jgz a -19`

Nevermind, both part 1 and 2 are simple


// So... register a = 1, try to find register h at end !
const rawData=`set b 65
set c b
jnz a 2
jnz 1 5
mul b 100
sub b -100000 // b = 106500 
set c b
sub c -17000 // c = 123500
set f 1 // for b = 106500 ; b <= 123500 ; b += 17
set d 2
set e 2
set g d 
mul g e
sub g b
jnz g 2 // d*e != b : we skip "set f 0" (note that d and e takes all values between 2 and b... we are testing primes ?)
set f 0
sub e -1
set g e // e == b : we move on. (otherwise, go back to "set g d") (e++ each time)
sub g b
jnz g -8
sub d -1
set g d // d == b : we move on. (otherwise, go back to "set e 2") (d++ each time)
sub g b
jnz g -13 
jnz f 2 // Increment h only if "set f 0" was visited last after "set f 1"
sub h -1 
set g b // b == c : we leave the program (otherwise, b+=17 and we go back to "set f 1")
sub g c 
jnz g 2 // g == 0 : we leave the program
jnz 1 3
sub b -17 // So... we will go there 1000 times (b = 106500 to 123500 by increments of 17)
jnz 1 -23`.split("\n");


// d = 2..3..4..
// e = 2..3..4..
set g d 
mul g e
sub g b 
jnz g 2 // d*e == b : we skip f = 0
set f 0 
sub e -1
set g e // e == b : we move on. (otherwise, go back to "set g d") 

// So : h is increased every time a prime number is met between 106500+17k for k = 1..1000, I guess. 
// Actually, it's everytime a number in 106500, 106517... is NOT prime !