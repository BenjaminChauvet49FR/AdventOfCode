const rawDataOfficial = [
"226812424329784, 313674772492962, 250967806511035 @ -20, -101, 43",
"156274983486737, 293490501315933, 293121959642065 @ 45, -251, -173",
"207764536837581, 163271244449071, 371393112488483 @ 93, 245, -192",
"209804670682561, 250789988079231, 252487181905867 @ 91, 79, 34",
"150339779415021, 271611882013561, 68614454684867 @ 101, -96, 988",
"416002937640560, 394232937765767, 269351324135307 @ -36, -46, 11",
"362712956952531, 433513695633343, 191526561133472 @ -7, -106, 96",
"198785880147405, 324921397895257, 340510306948487 @ 35, -152, -209",
"145728474859247, 321958985802473, 289440083099601 @ 70, -536, -191",
"124756947449141, 227338006452723, 296266342750791 @ 213, 133, -268",
"332568571840203, 355668185768191, 207193221176993 @ -16, -45, 89",
"204932234107573, 361035500446254, 368031435248579 @ 67, -179, -225",
"354191625646151, 440172655305121, 178446451055107 @ -72, -180, 136",
"131370683845710, 276968634585145, 18537100350464 @ 224, -24, 744",
"381075243620540, 246451426069301, 412128145779322 @ -38, 100, -154",
"371408942167819, 311253810580593, 341654656320769 @ -20, 28, -71",
"333337979972254, 370033418653506, 286632040562581 @ 42, -25, -7",
"282900077707140, 447567024122137, 193469790443240 @ -14, -248, 132",
"177432361189863, 299279215511650, 326353067598698 @ 121, -49, -140",
"186672601371741, 422952506760037, 306748088746761 @ 113, -306, -83",
"299134614943815, 345979506922644, 351340506277092 @ -199, -179, -214",
"449174371448965, 402451188088429, 370294596173189 @ -86, -63, -96",
"134521971308111, 335048477142587, 39345624165109 @ 198, -307, 907",
"160030243347860, 202031005316985, 280584474757761 @ 90, 232, -67",
"314698380980791, 306162779127521, 313300253646622 @ -83, -16, -74",
"163120323199498, 251813162705417, 252980126796845 @ 12, -8, 57",
"332868488972174, 403055667374735, 251174051379005 @ -50, -134, 33",
"401473961701150, 333678178297506, 543403333868225 @ -48, 5, -291",
"170076952437801, 126165578816617, 311520969977369 @ -102, 846, -347",
"371365868541921, 356961155336251, 266751612326447 @ -81, -54, 11",
"295819054940343, 314110369178887, 148797344309157 @ -106, -57, 251",
"409790582469324, 151776795963805, 327424180071023 @ -54, 204, -53",
"138270680203396, 258107386330621, 271817976005785 @ 58, -180, -107",
"381127481911971, 378672046969706, 266586976644712 @ -139, -109, 10",
"150602342969451, 230309309072094, 273838499640000 @ -7, 109, -100",
"247771192610296, 277110105573566, 256594584544007 @ -14, 17, 27",
"234953756905977, 247973886947785, 100800374190905 @ 91, 92, 255",
"300082554382681, 412323165219231, 105273111392847 @ 39, -106, 211",
"355473428520533, 300226793590001, 176973665485853 @ 30, 50, 102",
"164118745840161, 310270955817121, 277542320789657 @ 142, -95, -27",
"155316551860875, 178833313088781, 421515537724424 @ 101, 340, -690",
"113097958812819, 232996675372671, 166592662155777 @ 296, 95, 601",
"348011080800000, 257133306864214, 389189804694326 @ 10, 89, -122",
"471353343966397, 247623130004601, 154156717233165 @ -116, 100, 134",
"379625132825373, 280795430679892, 384015098750291 @ -85, 51, -145",
"345436464394921, 287414371429361, 234597269784197 @ -149, 14, 66",
"209024340185796, 330885520086596, 250262440388362 @ 134, -25, 34",
"462399349046637, 215096631146905, 534787968532364 @ -133, 136, -296",
"233218678470666, 209373875900096, 282236738475972 @ -94, 181, -50",
"364370794836012, 529398617354913, 198090760581417 @ -58, -272, 101",
"318379215980550, 304265665177276, 242192933909393 @ -16, 15, 45",
"129743598096313, 236721377399509, 279908269170341 @ 135, 33, -210",
"269476393335872, 260772484481864, 289227860228619 @ 30, 71, -25",
"216130232072719, 355602991267416, 189322085516970 @ 97, -95, 140",
"436654290368772, 372562528461982, 408280635456701 @ -156, -69, -175",
"370685230631807, 425033573386273, 340171865667130 @ -15, -96, -68",
"150712956758015, 325563717472692, 101656258424986 @ 189, -101, 382",
"121675678883010, 210467917719419, 244637283500931 @ 242, 238, 115",
"411187519123038, 370712005399153, 268775553986030 @ -18, -16, 12",
"322069853848298, 392134114907230, 292577857343309 @ 42, -57, -15",
"447333513520184, 269645411986027, 298540741526325 @ -174, 66, -31",
"216824124225964, 216361706626225, 291510688902366 @ 76, 144, -40",
"129979253714201, 76732957580221, 165501484840552 @ 231, 540, 280",
"239985869073975, 376578568311571, 414456906800341 @ -46, -255, -373",
"247218743568265, 317007252145505, 326539563001225 @ 121, 23, -53",
"268930515637385, 336248328475505, 146150021195017 @ 37, -41, 191",
"299164178536649, 291438991834156, 267128298655048 @ -41, 15, 8",
"267802016841073, 388516469812893, 88266692542184 @ -33, -196, 360",
"342547986428481, 230241862159219, 280568909017763 @ -97, 118, -13",
"241634112589209, 240889586660953, 366435328974185 @ -193, 76, -375",
"154069436892281, 221258114238761, 360627707772537 @ 37, 169, -620",
"318849150729771, 389834068801143, 284744219130787 @ -172, -229, -34",
"404782734480441, 498108637411081, 338293657221017 @ -267, -378, -125",
"367540825848231, 285288766152598, 309229840729775 @ -7, 59, -33",
"396564882034713, 248866950174169, 247096549729353 @ -31, 99, 34",
"183493048738773, 12842107422289, 294975523620965 @ 166, 442, -32",
"178437823046589, 173806572621985, 149017516394825 @ 189, 188, 157",
"254630514386029, 355742791369961, 242761866252038 @ 91, -40, 42",
"171057908731074, 252806501655641, 268921331156025 @ 86, 40, -11",
"266991275944070, 424335027782622, 233438708609457 @ 34, -181, 61",
"235879561772829, 191792884744681, 298461089666369 @ -116, 240, -105",
"233494912626318, 327667922114587, 289796099617584 @ 32, -78, -40",
"187723434876126, 227177583808225, 273266362535354 @ -42, 128, -40",
"170997605418554, 291623223208415, 306528790939743 @ 100, -74, -125",
"232769695100774, 222775790351947, 236588144792459 @ -68, 138, 87",
"434100223060419, 291251516687773, 193436620963280 @ -163, 36, 110",
"163574679152325, 266899322028047, 273506266694701 @ -115, -197, -97",
"459713912113966, 383298909011446, 325794125444472 @ -102, -45, -50",
"247129148008101, 264760620189671, 438933331243254 @ 83, 70, -230",
"254300147073309, 228400325803240, 290993205991790 @ 35, 121, -32",
"117473078029260, 176498017169623, 241294403977877 @ 264, 178, 41",
"243971994022221, 358054900493677, 291445385822525 @ 118, -29, -16",
"216487448423401, 336061727965401, 282194484546457 @ 22, -143, -35",
"182901567674451, 141151440221611, 250068644113457 @ 97, 346, 45",
"359669992644421, 445634519183670, 263593698917281 @ -197, -293, 13",
"222066789636092, 270843877822651, 274276397034681 @ 40, 30, -11",
"158199444427317, 237116444149027, 289652549373881 @ -95, 47, -251",
"429652295539542, 422631850291135, 562342988766206 @ -36, -66, -270",
"205083926248731, 305475350554065, 143345072499275 @ 68, -52, 282",
"177875779643655, 238682123207407, 269544190310349 @ 5, 78, -23",
"401765485269591, 203302696220325, 302472184065755 @ -112, 154, -36",
"321318955577177, 253292195993657, 231528698718641 @ -21, 86, 60",
"308042485715319, 445081628658383, 326393154123835 @ 62, -109, -50",
"490131982488621, 286558346895145, 505634218526633 @ -202, 48, -287",
"336635599109197, 398001079327871, 475240344095588 @ -189, -230, -426",
"153915249897215, 240946978924845, 323238172437691 @ 37, 44, -385",
"415338751515009, 405819124967233, 377843114841017 @ -88, -89, -119",
"250186564897311, 292774704129871, 279711867516487 @ -16, -15, -22",
"248518643989147, 199896753315265, 392771042835587 @ -59, 192, -309",
"498381108074463, 307262651286609, 375766767260991 @ -106, 44, -92",
"231626403383069, 353475878542365, 311809700941305 @ 142, -13, -35",
"330404205547831, 302108882072421, 282062166649258 @ -27, 20, -10",
"150739171856175, 269036291617819, 200708821397315 @ 145, -26, 235",
"431750405787181, 218833052472337, 473676136629243 @ -107, 132, -232",
"137133580846341, 233634162865561, 266558456638397 @ -12, 52, -84",
"165774864281551, 283363209205606, 253422953888147 @ 25, -153, 51",
"246465586416955, 177909607437079, 293085037074816 @ -83, 258, -70",
"270271962452731, 384617666903331, 203485514707697 @ 100, -47, 81",
"248883035682403, 192787047028009, 439690095061863 @ 90, 168, -218",
"152395564802219, 244740037345529, 260240725477151 @ 21, 8, 15",
"258092474520861, 304940735329141, 266933773685357 @ 22, -11, 8",
"366061098776751, 412573193655019, 233172074748683 @ 8, -69, 48",
"201201467272667, 273668853917424, 257440865760383 @ 9, -17, 27",
"397408690273143, 483406605742714, 225658342362918 @ -43, -159, 58",
"306055893577751, 315043637245731, 291241545879507 @ -14, -7, -26",
"560551028765481, 384099725927061, 507048368045557 @ -253, -61, -268",
"265717768499823, 228996474589321, 254087787188849 @ 41, 120, 29",
"203069689620999, 227906026532143, 512744752280519 @ 30, 123, -676",
"398032758913720, 275737600846958, 352087350365828 @ -90, 61, -96",
"198774715884459, 314295191751184, 228023079534329 @ 17, -141, 117",
"128853372068511, 226615759084396, 269078896716192 @ 197, 135, -40",
"345092872685097, 403949788076377, 339109776770345 @ 44, -49, -56",
"274191033983571, 174210680057374, 226224270429419 @ -47, 229, 87",
"384108851088068, 345770833273182, 319163724380292 @ -26, -7, -44",
"404273468932641, 236143855716466, 255313102542557 @ -17, 113, 25",
"331192562290950, 263207763038965, 442528334971709 @ -160, 52, -343",
"152403834589776, 268040611990506, 267326592449532 @ -76, -269, -58",
"491387877772981, 187335656098869, 165418264664989 @ -122, 163, 118",
"301267456430421, 451685436543421, 143788582634177 @ 70, -115, 143",
"166548209989413, 384593175859375, 44926191551855 @ 137, -287, 582",
"173034411037251, 203770542039901, 269784469026317 @ 42, 222, -21",
"343728337736417, 288695430774865, 213681903430657 @ -156, 9, 106",
"277530430099293, 368318214248017, 386007222428093 @ -50, -154, -228",
"262860563823231, 393113594100964, 557994156280703 @ -127, -323, -785",
"192700681874021, 289272343659211, 346877342696417 @ -155, -219, -471",
"192601699048503, 132338220160038, 220188874389636 @ -91, 581, 208",
"182163809434697, 123170389409469, 257222811729911 @ 175, 266, 24",
"132145510568601, 151784941558117, 319858654515893 @ 143, 793, -506",
"132962996718647, 241472605600143, 261857402500645 @ 97, -22, -7",
"194650594301163, 377329857620119, 436742279852123 @ 100, -197, -358",
"148353156246381, 251330737945841, 255400662676225 @ 8, -70, 55",
"278663229909737, 157820964904049, 273968684517033 @ -23, 247, -5",
"481471498622666, 357869017185811, 540666758536122 @ -92, -6, -254",
"160253705985081, 223762039322041, 203563344145177 @ 143, 135, 181",
"143828389368761, 259966816858249, 282553386424089 @ -92, -312, -302",
"276993381986333, 216040285929412, 365795112051780 @ -141, 153, -250",
"247722790163113, 504883776704361, 294151954492041 @ -98, -650, -76",
"291334760407741, 335156003926701, 73916344914187 @ -27, -58, 332",
"363818533305887, 185344339014390, 181152926374432 @ -35, 173, 116",
"290026596787215, 341370589248127, 264336841852961 @ -15, -62, 13",
"163902723076158, 253018627319182, 262085113641929 @ -8, -23, 5",
"140439739753245, 292217535097225, 319490255447687 @ 129, -264, -344",
"210284705883797, 408367861464421, 268280474727121 @ -6, -405, -5",
"245311089737136, 220855886990656, 310652871876647 @ -158, 147, -149",
"241902334888120, 149549248985679, 193554071712780 @ 36, 266, 142",
"285296599906147, 421531037073570, 366820037595387 @ 61, -113, -109",
"423865055169577, 268187219397172, 246333738726880 @ -41, 81, 34",
"137287992135641, 252870057053931, 324163276718637 @ 183, 19, -253",
"355396576477371, 389362083390403, 251328610452713 @ 28, -39, 29",
"165285291570681, 238899077775465, 267215164950137 @ -97, 44, -39",
"302063036968872, 263464646172790, 334878253037600 @ -158, 41, -152",
"252869154783463, 247861718295363, 427967401186711 @ -179, 58, -533",
"279568377189345, 253863275104969, 238082919887513 @ -100, 64, 69",
"253808687195241, 369917362127521, 471693722335097 @ -107, -265, -559",
"258846227051489, 330047436078379, 233597074842929 @ 67, -21, 57",
"426824903490833, 402422720537013, 438224383625041 @ -251, -169, -277",
"253134121796500, 252300126114450, 176314736631211 @ 130, 97, 103",
"275964456439229, 551355282628473, 277363177465437 @ -44, -508, -14",
"272209689092145, 298636394666587, 451686651886127 @ -33, -14, -349",
"205728250843073, 454056493125531, 273435717525320 @ -129, -890, -42",
"270713859785071, 426247566072225, 393201404679365 @ -222, -508, -405",
"166235733533061, 257933573469361, 254388976292567 @ 5, -36, 48",
"243954127093397, 214352054385641, 184710777290729 @ -80, 160, 225",
"254584304338189, 525023312065873, 251806888599329 @ -60, -582, 39",
"166922197955445, 281798692040785, 194672021518025 @ 206, 58, 97",
"305195959730235, 215725269307987, 175686640862621 @ 80, 133, 103",
"226405720838373, 255611944862597, 262528552126353 @ 125, 86, 17",
"406030838706241, 284697992495621, 281844200679797 @ -83, 53, -6",
"234633262682615, 303415790107031, 236870392389001 @ -26, -65, 77",
"292824485271826, 84401979825296, 359214165102082 @ 76, 275, -86",
"254343477711829, 351493472175230, 245287718513319 @ 51, -71, 43",
"285889251402986, 272134765966656, 399456707918247 @ -36, 43, -229",
"316827363603513, 287363868635401, 233548902966233 @ 25, 50, 52",
"182251115645791, 229747920375191, 112865392084847 @ 178, 119, 216",
"205557319902711, 241883819223667, 392819241249785 @ 33, 86, -331",
"302951211899355, 415310717246104, 244306447092499 @ -55, -201, 47",
"238406163147497, 423301793367513, 300303703230169 @ 40, -241, -55",
"331738208850629, 325815291313729, 293463200288085 @ 25, 12, -17",
"123543920857049, 243202141367393, 262718125550345 @ 207, -34, -15",
"156697037317597, 396152523147976, 340727046879673 @ 67, -735, -395",
"266042825665081, 291114996988821, 291698951977237 @ -153, -55, -70",
"263224132399056, 333911889432547, 252350762616146 @ 78, -14, 30",
"236209574677671, 307852840145338, 102590984223854 @ 133, 33, 194",
"172377336428136, 312823668405998, 381795308847099 @ 158, -43, -217",
"259494690578721, 308678617442236, 386523792514682 @ 31, -11, -188",
"198700566200601, 244957965698081, 237514630906197 @ -49, 58, 106",
"328306885162569, 363994846762857, 415450484493401 @ -76, -98, -231",
"165976914812841, 224427000256585, 262951355921625 @ -112, 156, -7",
"164122243343495, 158391574931442, 152992753239454 @ 217, 191, 128",
"131900123436930, 244841154477094, 270762352500308 @ 100, -71, -116",
"240466114853754, 343143689758386, 267337996167345 @ 140, 5, 13",
"179200478900577, 228535699929823, 357388731249405 @ -133, 123, -617",
"361642017424901, 403911226467201, 266011743719837 @ -68, -118, 12",
"280842063439552, 340552026571237, 358115130218256 @ -104, -132, -202",
"130590048213130, 143934801417239, 230762697677509 @ 234, 322, 89",
"195193054234521, 261168919784161, 257402129929817 @ -45, -9, 29",
"335635913129307, 278250547004290, 123779942858144 @ -59, 47, 222",
"269922898482457, 362317422528249, 262274750860553 @ 105, -19, 18",
"185512871283449, 251739156457097, 260053359229529 @ -44, 16, 18",
"335641306786910, 301736537600093, 322566322417799 @ 36, 44, -45",
"262939630979064, 105432813744460, 25999294289204 @ 84, 273, 310",
"283828190034156, 419323166002891, 484077584674562 @ -156, -362, -548",
"207930446148133, 124443118603041, 59836784338293 @ 66, 350, 460",
"150199237093181, 243818367601432, 262160724111416 @ -117, -57, -12",
"215507738916873, 393861046221349, 186550184026973 @ 35, -267, 192",
"278378328757028, 217425394683098, 326030780479126 @ -138, 149, -146",
"287290966967501, 299045582765830, 148113630744121 @ -77, -21, 245",
"303883900529871, 139765895931661, 369761457090287 @ 26, 234, -120",
"219188795163573, 289059465898765, 242198666430317 @ -118, -107, 86",
"501036659727801, 466533503655049, 390078786168089 @ -267, -209, -160",
"133631695280851, 209448336440881, 236443067200647 @ 160, 252, 176",
"251381031639111, 166246431938609, 280541356440063 @ 68, 212, -10",
"122166097604859, 244921005082213, 251512358629133 @ 214, -86, 123",
"222255432167401, 269625866553411, 255208723219797 @ 15, 23, 31",
"266862605590966, 394889370055171, 238916715950997 @ 118, -42, 41",
"142579022909245, 222228454512547, 293134874954628 @ 27, 186, -308",
"144826897623275, 344350931300997, 171447513554849 @ 180, -242, 297",
"380942941157207, 228996474589321, 458682051813264 @ -15, 120, -190",
"321809229601916, 212988788890561, 163351206136937 @ -42, 144, 165",
"167721757841185, 280181185225245, 285542028639933 @ 129, -19, -50",
"296268616544271, 342507487072443, 294128301760900 @ 53, -14, -20",
"215635453612641, 13733806041017, 7825286001961 @ 113, 452, 409",
"353228047621623, 126859570620787, 172873701044051 @ -98, 277, 154",
"166263677201316, 259383046224136, 225227206701242 @ -142, -137, 310",
"258861986213741, 281615834345121, 436118943660297 @ -20, 14, -335",
"278110325490651, 289284466260331, 317820734938517 @ 6, 23, -73",
"343554768357689, 432204575733257, 173583088427497 @ -65, -176, 146",
"190250003633442, 215399110845910, 310549307745186 @ 152, 141, -58",
"265456342016841, 390373854248071, 255992734260747 @ 47, -117, 26",
"326409606382111, 409585419428449, 527625017811143 @ -207, -288, -585",
"302347225674201, 500272799317801, 255499671985697 @ 27, -228, 26",
"309549501401907, 347714710879225, 241938756169217 @ 44, -16, 41",
"292251395785072, 334153303126814, 266685417356848 @ 96, 19, 14",
"195453805661376, 284404222158806, 300875745884307 @ 14, -59, -113",
"222975147192951, 340049998141981, 235507899565262 @ 101, -52, 58",
"219059938403859, 218608678642962, 233028299850278 @ 137, 133, 54",
"235347302540133, 354694589005993, 331557348976105 @ 62, -96, -103",
"220498632330807, 218984669835991, 371307049016719 @ -196, 165, -482",
"165460624951179, 175079531389192, 359890402256498 @ 77, 333, -376",
"161516201594747, 345375910959571, 273673197857581 @ 124, -255, -25",
"221376747637376, 288108670851715, 342691778699234 @ 148, 54, -72",
"122393827577343, 285935676203875, 273400451287145 @ 224, -433, -115",
"310931957440681, 170849059989201, 180278707021137 @ 61, 181, 104",
"142711370544921, 246472098127033, 239709592546505 @ 153, 41, 110",
"146020144131675, 282815842561117, 246400126023383 @ -39, -468, 163",
"508260279789641, 207221146996771, 171259089597747 @ -113, 141, 106",
"197267273406649, 304581270764425, 325482388023577 @ 72, -63, -139",
"496706618817771, 277456516192339, 291704014731509 @ -182, 63, -17",
"259354117948859, 259746250148486, 263654981560766 @ -35, 55, 12",
"378507037721611, 266670302805667, 487234281447399 @ -27, 78, -233",
"355108894671775, 276917663015421, 177931300005127 @ 16, 70, 106",
"315103820004283, 322481778548436, 187860739908609 @ 21, 5, 109",
"267950833762830, 174512980942947, 237295525737100 @ -28, 226, 64",
"192026285734737, 306366114072616, 273304268185988 @ -113, -275, -50",
"190721499961273, 181521199639225, 302916322367085 @ 135, 204, -56",
"197862596674135, 184884728412917, 313496631677917 @ 72, 226, -109",
"458879169562235, 287319054711857, 302281570419597 @ -134, 52, -29",
"143417323607321, 254898991582921, 6416071025337 @ 234, 90, 314",
"138895786758561, 246070018012288, 253168774445582 @ -17, -113, 106",
"147942426643213, 247539261733645, 260216479600933 @ -134, -129, 10",
"151771585548393, 347216651647689, 358425910203065 @ 176, -188, -237",
"199209312298409, 54010491897465, 301145245134153 @ 81, 514, -73",
"151550971821112, 91306849435840, 174874976175875 @ 190, 423, 207",
"307536737526111, 494518980828000, 260798494504899 @ -7, -259, 19",
"158992095738143, 259363727425478, 265358989597945 @ 45, -43, -11",
"205856536657741, 311414058559921, 273856545587497 @ 21, -108, -19",
"185456513434046, 252417029936718, 262580696784483 @ -32, 17, 7",
"341934834818277, 350771213898965, 393894793596865 @ 17, -14, -127",
"386024409880665, 189535818956129, 166750563625481 @ -49, 166, 129",
"192153195600721, 506775281280017, 184339305588593 @ 33, -746, 255",
"209956315683075, 313391970987419, 360851480893168 @ 161, 26, -92",
"138778832797164, 251339998677770, 44705197566574 @ 242, 97, 242",
"324197070028377, 254111274272187, 434588362019733 @ -73, 79, -265",
"150110943303191, 250617751235851, 307372889405877 @ -32, -81, -425",
"346720612406361, 519181593383711, 185186044047653 @ 23, -185, 99",
"149354651375707, 290335935042521, 294974207392353 @ 162, -80, -95",
"355103096256329, 407289258239505, 325320702519481 @ -53, -118, -67",
"266097902083829, 361737584054027, 257847813215123 @ -23, -137, 24",
"153240155834873, 323270994894985, 159476149068025 @ 121, -264, 428",
"161924882430683, 199708456426737, 257085108369293 @ 150, 196, 27"];

const rawDataExample = [
"19, 13, 30 @ -2,  1, -2",
"18, 19, 22 @ -1, -1, -2",
"20, 25, 34 @ -2, -2, -4",
"12, 31, 28 @ -1, -2, -1",
"20, 19, 15 @  1, -5, -3"
];


const gData = [];

function init() {
	var tokens;
	for (var i = 0 ; i < rawData.length ; i++) {
		tokens = rawData[i].split(/,|@/);
		gData.push({position : 
			[parseInt(tokens[0].trim(), 10),
			parseInt(tokens[1].trim(), 10),
			parseInt(tokens[2].trim(), 10)],
			speed :
			[parseInt(tokens[3].trim(), 10),
			parseInt(tokens[4].trim(), 10),
			parseInt(tokens[5].trim(), 10)],
		}); 
	}
}

var gXMIN, gYMIN, gXMAX, gYMAX;
var rawData;

function conclusion_24_1() {
	gXMIN = 200000000000000;
	gYMIN = 200000000000000;
	gXMAX = 400000000000000;
	gYMAX = 400000000000000;
	rawData = rawDataOfficial;
	/*
	gXMIN = 7;
	gYMIN = 7;
	gXMAX = 27;
	gYMAX = 27;
	rawData = rawDataExample;	*/
	init();
	var answer = 0;
	for (var i = 0 ; i < gData.length ; i++) {
		for (var j = 0 ; j < i ; j++) {
			if (crossingPaths(gData[i], gData[j])) {
				answer++;
//				console.log("Crossing for " + i + " " + j);
			}
		}
	}
	return answer;
}

function crossingPaths(p_hs1, p_hs2) {
	var x1 = p_hs1.position[0];
	var y1 = p_hs1.position[1];
	var x2 = p_hs2.position[0];
	var y2 = p_hs2.position[1];
	var xS1 = p_hs1.speed[0];
	var yS1 = p_hs1.speed[1];
	var xS2 = p_hs2.speed[0];
	var yS2 = p_hs2.speed[1];
	// To find a crossing point we need to find t1 and t2 such that : 
	// x1 + t1 * xS1 = x2 + t2 * xS2;
	// y1 + t1 * yS1 = y2 + t2 * yS2;
	// so :
	// t1*xS1-t2*xS2 = x2-x1
	// t1*yS1-t2*yS2 = y2-y1
	// ax+by=e, cx+dy=f leads to x = (de-bf)/(da-bc) and y = (ce-af)/(bc-ad)
	// So...
	const a = xS1;
	const b = -xS2;
	const c = yS1;
	const d = -yS2;
	const e = x2-x1;
	const f = y2-y1;
	const disc = a*d-b*c;
	if (disc == 0) {
		// Still a chance that both are aligned... 
		return ( d*e == b*f && c*e == a*f );
	} else {
		const t1 = (d*e-b*f)/disc;
		const t2 = (a*f-c*e)/disc;
		const xCross = x1 + t1*xS1;
		const yCross = y1 + t1*yS1;
		var answer = (t1 >= 0 && t2 >= 0 && xCross >= gXMIN && yCross >= gYMIN && xCross <= gXMAX && yCross <= gYMAX);
/*		if (answer) {			
			console.log("Crossing : " + xCross + "," + yCross + " ; " + (x2 + t2*xS2) + " " + (y2 + t2*yS2));
		}*/
		return answer;
	}
}

// --------------------

// Generate the straight line from the point (t1) in path 1 and (t2) in path 2 (t2 != t1), identified by P0 = time in t0, and P1 = time in t1  (make it great)
function getLine(p_tP0, p_tP1) {
	const p0 = gData[0].position;
	const v0 = gData[0].speed;	
	const p1 = gData[1].position;
	const v1 = gData[1].speed;
	var p0New = [];
	var p1New = [];
	var vNew = [];
	for (var i = 0 ; i <= 2 ; i++) {
		p0New.push(p0[i]+v0[i]*p_tP0);
		p1New.push(p1[i]+v1[i]*p_tP1);
		vNew[i] = (p1New[i]-p0New[i])/(p_tP1-p_tP0); 
	}
	var pFinal = [];
	for (var i = 0 ; i <= 2 ; i++) {
		pFinal.push(p0New[i]-vNew[i]*p_tP0);
	}
	return {position : pFinal.slice(), speed : vNew.slice()}
}

// Okay. We have T0 and T1 with T1 != T0
/* 
So : point on line 0 P'0 is P0 + T0V0 ; point on line 1 P'1 is P1 + T1V1
Desired line that is in "P'0 in T0 and P'1 in T1" is such that :
p+T0v = P'0 ; p+T1v = P'1
v = (P'1-P'0)/(T1-T0)
p = P'0-vT0

Line = p+tv, t real.
We need to have p and v such that it intersects p2+tV2.

So : 
We need t0 and t1 such that T EXIST SUCH THAT (p+Tv == p2 + Tv2)
p2-p = T(v2-v) (or T2/T1...)

Remember : 
v = (P1+v1T1-P0-v0T0)/(T1-T0)
p = P0+v0T0 - (P1+v1T1-P0-v0T0)T0/(T1-T0)

p2-( P0+v0T0 - (P1+v1T1-P0-v0T0)T0/(T1-T0) ) colinear with 
v2- (P1+v1T1-P0-v0T0)/(T1-T0)

(T1-T0)(p2-P0-v0T0) - (P1+v1T1-P0-v0T0)T0 colinear with
(T1-T0)v2 - (P1+v1T1-P0-v0T0)

aT1 + bT0**2 + cT0 + dT1T0 colinear with 
eT0 + fT1 +g
*/


// Draw a (x0, x1) line and see how the (y,z) from that line and the (y,z) from the 2nd hailstone are relative to each other when at the same time T both xs are equal. (no hailstone has a null x speed)
function inXFromLineDelta(p_tP0, p_tP1) { 
	var l = getLine(p_tP0, p_tP1);
	var l2 = gData[2];
	var vL = l.speed;
	var pL = l.position;
	var v2 = l2.speed;
	var p2 = l2.position;
	
	
	// So x = pxL + t*vxL = pX2 + t*vX2 
	// t = (pxL-pX2)/(vX2-vXL)
	if (vL[0] != v2[0]) {		
		var t = (pL[0]-p2[0])/(v2[0]-vL[0]);
		//return [p2[0]+t*v2[0] - (pL[0]+t*vL[0]), p2[1]+t*v2[1] - (pL[1]+t*vL[1]), p2[2]+t*v2[2] - (pL[2]+t*vL[2])]; // This line, 1st coor delta was only for control that both Xs are equal. It must be 0.
		return [p2[1]+t*v2[1] - (pL[1]+t*vL[1]), p2[2]+t*v2[2] - (pL[2]+t*vL[2])]; // Difference between zs, difference between ys
	} else {
		return [];
	}
}

function calculateRatioYZForT0(p_tP0, p_tP1Ref1, p_tP1Ref2) {
	if (p_tP0 == p_tP1Ref1 || p_tP0 == p_tP1Ref2) {
		console.log("Incorrect values !");
		return -1;
	} else {
		var dYdZref1 = inXFromLineDelta(p_tP0, p_tP1Ref1);
		var dYdZref2 = inXFromLineDelta(p_tP0, p_tP1Ref2);
		if (dYdZref1.length == 0) {
			console.log("Unlucky ref time : " + p_tP1Ref1 + " ; our line mustn't be vertical");
			return -1;			
		}
		if (dYdZref2.length == 0) {
			console.log("Unlucky ref time : " + p_tP1Ref2 + " ; our line mustn't be vertical");
			return -1;						
		}
		return ((dYdZref2[0]/dYdZref1[0])/(dYdZref2[1]/dYdZref1[1])); // If it is close to 1, our t0 is correct. 
	}
}

function conclusion_24_2_then() {
	rawData = rawDataOfficial;
	init();
	// Let's try all t0, t1 couples such that we have one couple that crosses the third line !
	// Once we have the correct "t0", when we make t1 change, DZ is proportional with DY (assuming values for t0 and t1 are correct). 
	// (See below)
	
	// I'll make a "plus or minus" to get the value... though idk what is the best position.
	// Now, let's assume we have t0. Look for t1.
	// Easy but I'm too lazy to program it.
	console.log("try M = 100000000000000; inXFromLineDelta(0, M); calculateRatioYZForT0(0, M, 5*M);");
	// calculateRatioYZForT0(M/10000, M, 5*M); : 1.057
	// calculateRatioYZForT0(M/1000, M, 5*M); : 0.978
	// calculateRatioYZForT0(M/100, M, 5*M); : 1.033
	// calculateRatioYZForT0(0.975*M, M, 5*M) : 1.025
	// calculateRatioYZForT0(4.9999*M, M, 5*M) : 1.0250421699481824
	// calculateRatioYZForT0(5.0001*M, M, 5*M) : 1.0250421697404817
	// So Once we have something decreasing falling to 1.025...  it won't be 1.
	// We need to see where it oscillates I guess.
}

// With the example :
// Let's assume t0, t1 are between 0 and 100 each.
// First, t0 = 0. t1 = 10, t2 = 20 : (10.222, 2.666) and (10.631, 2.31) : obviously not linear. z1/y1 = 0.87 ; z2/y2 = 1.03  ; (z1/y1)/(z2/y2) < ! 
// Then, t0 = 50. t1 = 10, t2 = 20 : (-123.111, -86.222) and (-131.473, -92.421) : not linear, but must we look below or above for t1 ? I'd say "in between" as : z2/z1 = 1.12 ; y2/y1 = 1.08

// Not really evolutive !
// By the way, still with the example data :
// calculateRatioYZForT0(3.83333, 10, 50) : -35352.67920928439
// calculateRatioYZForT0(3.83334, 10, 50) : 17677.623814129467
// I assume setting a t0 = 23/6 is critical.
// calculateRatioYZForT0(1.08333, 10, 50) : 118687.825804383
// calculateRatioYZForT0(1.08334, 10, 50) : -59342.47719756665.
// I assume t0 = 13/12 is also critical.
// So we have sthg > 1, sthg < 0, sthg > 0 that intersects 1 and then falls before climbing to 1 again... okay ?

// Let's see if it also apply with the official data. We already have :
// calculateRatioYZForT0(M/10000, M, 5*M); : 1.057
// calculateRatioYZForT0(M/1000, M, 5*M); : 0.978

// calculateRatioYZForT0(5*M/10000, M, 5*M); // 1.4186593248213124
// calculateRatioYZForT0(5.5*M/10000, M, 5*M); //-1.6987747477910595
// calculateRatioYZForT0(6*M/10000, M, 5*M); 0.707567435378571
// calculateRatioYZForT0(5.75*M/10000, M, 5*M); 0.4612866721406848
// calculateRatioYZForT0(16*M/10000, M, 5*M); 0.9989519858182205
// calculateRatioYZForT0(18*M/10000, M, 5*M); 1.0011229003284121
// calculateRatioYZForT0(17*M/10000, M, 5*M); 1.000156795969393
// calculateRatioYZForT0(169*M/100000, M, 5*M); 1.000048027239764
// calculateRatioYZForT0(168*M/100000, M, 5*M); 0.9999368294724568
// calculateRatioYZForT0(16856*M/10000000, M, 5*M); 0.9999994030384413
// calculateRatioYZForT0(16857*M/10000000, M, 5*M); 1.0000005133935645
// calculateRatioYZForT0(16857*M/10000000, M, 5*M); 1.0000005133935645
//calculateRatioYZForT0(168565000000, M, 5*M); 0.99999995824669
//calculateRatioYZForT0(168566000000, M, 5*M); 1.0000000692809756
/*
calculateRatioYZForT0(168565376037.2, M, 5*M);
1.0000000000000004
calculateRatioYZForT0(168565376037, M, 5*M);
0.9999999999999805
*/
// Let's assume the value for T0 is... well, 168565376037.1785
// So : 
// T0 = 168565376037.1785
// inXFromLineDelta(T0, M)
// What if there were another T0 ?

/*
calculateRatioYZForT0(383159700000, M, 5*M); 
1.000000001486473
calculateRatioYZForT0(383159800000, M, 5*M); 
0.9999999936715576
...
T0 = 383159719020.99

inXFromLineDelta(T0, M*1)
(2) [-266426344436976.88, 39686670040471.31]
inXFromLineDelta(T0, M*0)
(2) [82217438358939.53, -12247048446419.844]
... 
inXFromLineDelta(T0, 173838400000)
(2) [-19198823.0625, 2859847.65625]
inXFromLineDelta(T0, 173838300000)
(2) [17006232.9375, -2533230.5625]

inXFromLineDelta(T0, 173838346971.9)
 [29, 0.96875]
T1 = 173838346971.9

So now, the final (lol !) answer :
getLine(T0, T1)
*/

/*position
(3) [118378223846878.56, 228996474589387.06, 259397320329532.72] 
(3) [262.99999999990933, 119.9999999998333, 20.999999999906173]
The speed seems to be 263, 120, 21. But what is the exact position ? 
*/

function inXFromLineDeltaAccuracy(p_p1, p_p2, p_p3, p_v1, p_v2, p_v3) { 
	var l = {position : [p_p1, p_p2, p_p3], speed : [p_v1, p_v2, p_v3]};
	var deltas = [];
	for (var i = 0 ; i < 15 ; i++) {		
		var l2 = gData[i];
		var vL = l.speed;
		var pL = l.position;
		var v2 = l2.speed;
		var p2 = l2.position;
		
		
		// So x = pxL + t*vxL = pX2 + t*vX2 
		// t = (pxL-pX2)/(vX2-vXL)
		if (vL[0] != v2[0]) {		
			var t = (pL[0]-p2[0])/(v2[0]-vL[0]);
			//return [p2[0]+t*v2[0] - (pL[0]+t*vL[0]), p2[1]+t*v2[1] - (pL[1]+t*vL[1]), p2[2]+t*v2[2] - (pL[2]+t*vL[2])]; // This line, 1st coor delta was only for control that both Xs are equal. It must be 0.
			deltas.push([p2[1]+t*v2[1] - (pL[1]+t*vL[1]), p2[2]+t*v2[2] - (pL[2]+t*vL[2])]); // Difference between zs, difference between ys
		} else {
			deltas.push([100000, 100000]);
		}
	}
	var answer = 0;
	for (var i = 0 ; i < deltas.length ; i++) {		
		for (var j = 0 ; j <= 1 ; j++) {
			answer += Math.abs(deltas[i][j]);
		}
	}
	return answer;
}

function conclusion_24_2() {
	rawData = rawDataOfficial;
	init();	
	/*position
	(3) [118378223846878.56, 228996474589387.06, 259397320329532.72] 
	(3) [262.99999999990933, 119.9999999998333, 20.999999999906173]
	The speed seems to be 263, 120, 21. But what is the exact position ? 
	*/
	/*const x0 = 118378223846878;
	const y0 = 228996474589387;
	const z0 = 259397320329532;*/ // Recenter after a research of tolerance 50
	const x0 = 118378223846841;
	const y0 = 228996474589337;
	const z0 = 259397320329497;
	const vx = 263;
	const vy = 120;
	const vz = 21;
	var best = {x : -1, y : -1, z : -1, dist : 1000000000000}
	var dist;
	const amp = 25; // Aaaand we got ... {x: 118378223846841, y: 228996474589321, z: 259397320329497, dist: 0}
	for (var x = x0-amp ; x <= x0+amp ; x++) {
		for (var y = y0-amp ; y <= y0+amp ; y++) {
			for (var z = z0-amp ; z <= z0+amp ; z++) {
				dist = inXFromLineDeltaAccuracy(x, y, z, vx, vy, vz);
				if (dist < best.dist) {
					best.dist = dist;
					best.x = x;
					best.y = y;
					best.z = z;
				}					
			}
		}
	}
	return best;
}

